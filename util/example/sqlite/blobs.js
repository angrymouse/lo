import { Database } from 'lib/sqlite.js'

const { assert } = spin

const encoder = new TextEncoder()
const decoder = new TextDecoder()

const src = encoder.encode(`#pragma once
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile

#include "spin.h"

extern char _binary_main_js_start[];
extern char _binary_main_js_end[];

extern "C" {
  extern void* _register_load();
  extern void* _register_fs();
  extern void* _register_ffi();
  extern void* _register_tcc();
}

void register_builtins() {
  spin::builtins_add("main.js", _binary_main_js_start, _binary_main_js_end - _binary_main_js_start);
  spin::modules_add("load", &_register_load);
  spin::modules_add("fs", &_register_fs);
  spin::modules_add("ffi", &_register_ffi);
  spin::modules_add("tcc", &_register_tcc);
}

static unsigned int main_js_len = _binary_main_js_end - _binary_main_js_start;
static const char* main_js = _binary_main_js_start;
static const char* v8flags = "--no-verify-snapshot-checksum --stack-trace-limit=10 --use-strict --turbo-fast-api-calls";
static unsigned int _v8flags_from_commandline = 1;
static unsigned int _v8_threads = 2;
static unsigned int _v8_cleanup = 0;
static unsigned int _on_exit = 0;

`)

const db = (new Database()).open(':memory:')
db.exec("PRAGMA auto_vacuum = none");
db.exec("PRAGMA temp_store = memory");
db.exec("PRAGMA locking_mode = exclusive");
db.exec('CREATE TABLE IF NOT EXISTS asset (path TEXT PRIMARY KEY, payload BLOB)')
const createAsset = db.prepare('INSERT OR IGNORE INTO asset (path, payload) values (@path, @payload)')
assert(createAsset.bindText(1, 'main.h') === 0, db.error)
assert(createAsset.bindBlob(2, src) === 0, db.error)
assert(createAsset.step() === 101, db.error)
const blob = db.writableBlob('asset', 'payload', 1)
const size = blob.bytes()
assert(size > 0)
const u8 = new Uint8Array(size)
blob.read(u8, size)
assert(decoder.decode(u8).length === 1124)
const u82 = encoder.encode('hello')
blob.write(u82)
const size2 = blob.bytes()
assert(size2 > 0)
const u83 = new Uint8Array(size2)
blob.read(u83, size2)
assert(decoder.decode(u83).length === 1124)
blob.close()