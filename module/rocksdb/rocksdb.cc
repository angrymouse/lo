
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <c.h>
#include <spin.h>

namespace spin {
namespace rocksdb {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void closeSlow(const FunctionCallbackInfo<Value> &args) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rocksdb_close(v0);
}

void closeFast(void* p, void* p0) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>(p0);
  rocksdb_close(v0);
}
void openSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  const rocksdb_options_t* v0 = reinterpret_cast<const rocksdb_options_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  Local<Uint32Array> u322 = args[2].As<Uint32Array>();
  uint8_t* ptr2 = (uint8_t*)u322->Buffer()->Data() + u322->ByteOffset();
  char** v2 = reinterpret_cast<char**>(ptr2);
  rocksdb_t* rc = rocksdb_open(v0, *v1, v2);
  Local<ArrayBuffer> ab = args[3].As<Uint32Array>()->Buffer();
  ((rocksdb_t**)ab->Data())[0] = rc;
}

void openFast(void* p, void* p0, struct FastOneByteString* const p1, struct FastApiTypedArray* const p2, struct FastApiTypedArray* const p_ret) {
  const rocksdb_options_t* v0 = reinterpret_cast<const rocksdb_options_t*>(p0);
  struct FastOneByteString* const v1 = p1;
  char** v2 = reinterpret_cast<char**>(p2->data);
  rocksdb_t* r = rocksdb_open(v0, v1->data, v2);
  ((rocksdb_t**)p_ret->data)[0] = r;

}
void options_createSlow(const FunctionCallbackInfo<Value> &args) {

  rocksdb_options_t* rc = rocksdb_options_create();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((rocksdb_options_t**)ab->Data())[0] = rc;
}

void options_createFast(void* p, struct FastApiTypedArray* const p_ret) {

  rocksdb_options_t* r = rocksdb_options_create();
  ((rocksdb_options_t**)p_ret->data)[0] = r;

}
void readoptions_createSlow(const FunctionCallbackInfo<Value> &args) {

  rocksdb_readoptions_t* rc = rocksdb_readoptions_create();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((rocksdb_readoptions_t**)ab->Data())[0] = rc;
}

void readoptions_createFast(void* p, struct FastApiTypedArray* const p_ret) {

  rocksdb_readoptions_t* r = rocksdb_readoptions_create();
  ((rocksdb_readoptions_t**)p_ret->data)[0] = r;

}
void writeoptions_createSlow(const FunctionCallbackInfo<Value> &args) {

  rocksdb_writeoptions_t* rc = rocksdb_writeoptions_create();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((rocksdb_writeoptions_t**)ab->Data())[0] = rc;
}

void writeoptions_createFast(void* p, struct FastApiTypedArray* const p_ret) {

  rocksdb_writeoptions_t* r = rocksdb_writeoptions_create();
  ((rocksdb_writeoptions_t**)p_ret->data)[0] = r;

}
void options_set_create_if_missingSlow(const FunctionCallbackInfo<Value> &args) {
  rocksdb_options_t* v0 = reinterpret_cast<rocksdb_options_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint8_t v1 = Local<Integer>::Cast(args[1])->Value();
  rocksdb_options_set_create_if_missing(v0, v1);
}

void options_set_create_if_missingFast(void* p, void* p0, uint8_t p1) {
  rocksdb_options_t* v0 = reinterpret_cast<rocksdb_options_t*>(p0);
  uint8_t v1 = p1;
  rocksdb_options_set_create_if_missing(v0, v1);
}
void put_stringSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  String::Utf8Value v4(isolate, args[4]);
  uint32_t v5 = Local<Integer>::Cast(args[5])->Value();
  Local<Uint32Array> u326 = args[6].As<Uint32Array>();
  uint8_t* ptr6 = (uint8_t*)u326->Buffer()->Data() + u326->ByteOffset();
  char** v6 = reinterpret_cast<char**>(ptr6);
  rocksdb_put(v0, v1, *v2, v3, *v4, v5, v6);
}

void put_stringFast(void* p, void* p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastOneByteString* const p4, uint32_t p5, struct FastApiTypedArray* const p6) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>(p0);
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>(p1);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  struct FastOneByteString* const v4 = p4;
  uint32_t v5 = p5;
  char** v6 = reinterpret_cast<char**>(p6->data);
  rocksdb_put(v0, v1, v2->data, v3, v4->data, v5, v6);
}
void putSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  Local<Uint8Array> u84 = args[4].As<Uint8Array>();
  uint8_t* ptr4 = (uint8_t*)u84->Buffer()->Data() + u84->ByteOffset();
  const char* v4 = reinterpret_cast<const char*>(ptr4);
  uint32_t v5 = Local<Integer>::Cast(args[5])->Value();
  Local<Uint32Array> u326 = args[6].As<Uint32Array>();
  uint8_t* ptr6 = (uint8_t*)u326->Buffer()->Data() + u326->ByteOffset();
  char** v6 = reinterpret_cast<char**>(ptr6);
  rocksdb_put(v0, v1, *v2, v3, v4, v5, v6);
}

void putFast(void* p, void* p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastApiTypedArray* const p4, uint32_t p5, struct FastApiTypedArray* const p6) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>(p0);
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>(p1);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  const char* v4 = reinterpret_cast<const char*>(p4->data);
  uint32_t v5 = p5;
  char** v6 = reinterpret_cast<char**>(p6->data);
  rocksdb_put(v0, v1, v2->data, v3, v4, v5, v6);
}
void getSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rocksdb_readoptions_t* v1 = reinterpret_cast<rocksdb_readoptions_t*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  Local<Uint32Array> u324 = args[4].As<Uint32Array>();
  uint8_t* ptr4 = (uint8_t*)u324->Buffer()->Data() + u324->ByteOffset();
  size_t* v4 = reinterpret_cast<size_t*>(ptr4);
  Local<Uint32Array> u325 = args[5].As<Uint32Array>();
  uint8_t* ptr5 = (uint8_t*)u325->Buffer()->Data() + u325->ByteOffset();
  char** v5 = reinterpret_cast<char**>(ptr5);
  char* rc = rocksdb_get(v0, v1, *v2, v3, v4, v5);
  Local<ArrayBuffer> ab = args[6].As<Uint32Array>()->Buffer();
  ((char**)ab->Data())[0] = rc;
}

void getFast(void* p, void* p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastApiTypedArray* const p4, struct FastApiTypedArray* const p5, struct FastApiTypedArray* const p_ret) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>(p0);
  rocksdb_readoptions_t* v1 = reinterpret_cast<rocksdb_readoptions_t*>(p1);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  size_t* v4 = reinterpret_cast<size_t*>(p4->data);
  char** v5 = reinterpret_cast<char**>(p5->data);
  char* r = rocksdb_get(v0, v1, v2->data, v3, v4, v5);
  ((char**)p_ret->data)[0] = r;

}
void deleteSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  Local<Uint32Array> u324 = args[4].As<Uint32Array>();
  uint8_t* ptr4 = (uint8_t*)u324->Buffer()->Data() + u324->ByteOffset();
  char** v4 = reinterpret_cast<char**>(ptr4);
  rocksdb_delete(v0, v1, *v2, v3, v4);
}

void deleteFast(void* p, void* p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastApiTypedArray* const p4) {
  rocksdb_t* v0 = reinterpret_cast<rocksdb_t*>(p0);
  rocksdb_writeoptions_t* v1 = reinterpret_cast<rocksdb_writeoptions_t*>(p1);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  char** v4 = reinterpret_cast<char**>(p4->data);
  rocksdb_delete(v0, v1, v2->data, v3, v4);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);

  v8::CTypeInfo* cargsclose = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsclose[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclose[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcclose = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoclose = new v8::CFunctionInfo(*rcclose, 2, cargsclose);
  v8::CFunction* pFclose = new v8::CFunction((const void*)&closeFast, infoclose);
  SET_FAST_METHOD(isolate, module, "close", pFclose, closeSlow);
  v8::CTypeInfo* cargsopen = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsopen[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsopen[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsopen[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsopen[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsopen[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcopen = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoopen = new v8::CFunctionInfo(*rcopen, 5, cargsopen);
  v8::CFunction* pFopen = new v8::CFunction((const void*)&openFast, infoopen);
  SET_FAST_METHOD(isolate, module, "open", pFopen, openSlow);
  v8::CTypeInfo* cargsoptions_create = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsoptions_create[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsoptions_create[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcoptions_create = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infooptions_create = new v8::CFunctionInfo(*rcoptions_create, 2, cargsoptions_create);
  v8::CFunction* pFoptions_create = new v8::CFunction((const void*)&options_createFast, infooptions_create);
  SET_FAST_METHOD(isolate, module, "options_create", pFoptions_create, options_createSlow);
  v8::CTypeInfo* cargsreadoptions_create = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsreadoptions_create[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsreadoptions_create[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcreadoptions_create = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* inforeadoptions_create = new v8::CFunctionInfo(*rcreadoptions_create, 2, cargsreadoptions_create);
  v8::CFunction* pFreadoptions_create = new v8::CFunction((const void*)&readoptions_createFast, inforeadoptions_create);
  SET_FAST_METHOD(isolate, module, "readoptions_create", pFreadoptions_create, readoptions_createSlow);
  v8::CTypeInfo* cargswriteoptions_create = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargswriteoptions_create[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargswriteoptions_create[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcwriteoptions_create = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infowriteoptions_create = new v8::CFunctionInfo(*rcwriteoptions_create, 2, cargswriteoptions_create);
  v8::CFunction* pFwriteoptions_create = new v8::CFunction((const void*)&writeoptions_createFast, infowriteoptions_create);
  SET_FAST_METHOD(isolate, module, "writeoptions_create", pFwriteoptions_create, writeoptions_createSlow);

  v8::CTypeInfo* cargsoptions_set_create_if_missing = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsoptions_set_create_if_missing[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsoptions_set_create_if_missing[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsoptions_set_create_if_missing[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CTypeInfo* rcoptions_set_create_if_missing = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infooptions_set_create_if_missing = new v8::CFunctionInfo(*rcoptions_set_create_if_missing, 3, cargsoptions_set_create_if_missing);
  v8::CFunction* pFoptions_set_create_if_missing = new v8::CFunction((const void*)&options_set_create_if_missingFast, infooptions_set_create_if_missing);
  SET_FAST_METHOD(isolate, module, "options_set_create_if_missing", pFoptions_set_create_if_missing, options_set_create_if_missingSlow);

  v8::CTypeInfo* cargsput_string = (v8::CTypeInfo*)calloc(8, sizeof(v8::CTypeInfo));
  cargsput_string[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsput_string[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsput_string[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsput_string[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsput_string[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsput_string[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsput_string[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsput_string[7] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcput_string = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoput_string = new v8::CFunctionInfo(*rcput_string, 8, cargsput_string);
  v8::CFunction* pFput_string = new v8::CFunction((const void*)&put_stringFast, infoput_string);
  SET_FAST_METHOD(isolate, module, "put_string", pFput_string, put_stringSlow);

  v8::CTypeInfo* cargsput = (v8::CTypeInfo*)calloc(8, sizeof(v8::CTypeInfo));
  cargsput[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsput[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsput[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsput[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsput[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsput[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsput[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsput[7] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcput = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoput = new v8::CFunctionInfo(*rcput, 8, cargsput);
  v8::CFunction* pFput = new v8::CFunction((const void*)&putFast, infoput);
  SET_FAST_METHOD(isolate, module, "put", pFput, putSlow);
  v8::CTypeInfo* cargsget = (v8::CTypeInfo*)calloc(8, sizeof(v8::CTypeInfo));
  cargsget[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsget[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsget[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsget[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsget[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsget[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsget[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsget[7] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcget = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoget = new v8::CFunctionInfo(*rcget, 8, cargsget);
  v8::CFunction* pFget = new v8::CFunction((const void*)&getFast, infoget);
  SET_FAST_METHOD(isolate, module, "get", pFget, getSlow);

  v8::CTypeInfo* cargsdelete = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsdelete[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsdelete[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsdelete[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsdelete[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsdelete[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsdelete[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcdelete = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infodelete = new v8::CFunctionInfo(*rcdelete, 6, cargsdelete);
  v8::CFunction* pFdelete = new v8::CFunction((const void*)&deleteFast, infodelete);
  SET_FAST_METHOD(isolate, module, "delete", pFdelete, deleteSlow);

  SET_MODULE(isolate, target, "rocksdb", module);
}
} // namespace rocksdb
} // namespace spin

extern "C" {
  void* _register_rocksdb() {
    return (void*)spin::rocksdb::Init;
  }
}
