
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <liblz4.h>
#include <spin.h>

namespace spin {
namespace lz4 {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void LZ4_compress_defaultSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  Local<Uint8Array> u80 = args[0].As<Uint8Array>();
  uint8_t* ptr0 = (uint8_t*)u80->Buffer()->Data() + u80->ByteOffset();
  const char* v0 = reinterpret_cast<const char*>(ptr0);
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  char* v1 = reinterpret_cast<char*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = LZ4_compress_default(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t LZ4_compress_defaultFast(void* p, struct FastApiTypedArray* const p0, struct FastApiTypedArray* const p1, int32_t p2, int32_t p3) {
  const char* v0 = reinterpret_cast<const char*>(p0->data);
  char* v1 = reinterpret_cast<char*>(p1->data);
  int32_t v2 = p2;
  int32_t v3 = p3;
  return LZ4_compress_default(v0, v1, v2, v3);
}
void LZ4_compress_HCSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  Local<Uint8Array> u80 = args[0].As<Uint8Array>();
  uint8_t* ptr0 = (uint8_t*)u80->Buffer()->Data() + u80->ByteOffset();
  const char* v0 = reinterpret_cast<const char*>(ptr0);
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  char* v1 = reinterpret_cast<char*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t v4 = Local<Integer>::Cast(args[4])->Value();
  int32_t rc = LZ4_compress_HC(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t LZ4_compress_HCFast(void* p, struct FastApiTypedArray* const p0, struct FastApiTypedArray* const p1, int32_t p2, int32_t p3, int32_t p4) {
  const char* v0 = reinterpret_cast<const char*>(p0->data);
  char* v1 = reinterpret_cast<char*>(p1->data);
  int32_t v2 = p2;
  int32_t v3 = p3;
  int32_t v4 = p4;
  return LZ4_compress_HC(v0, v1, v2, v3, v4);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);

  v8::CTypeInfo* cargsLZ4_compress_default = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsLZ4_compress_default[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsLZ4_compress_default[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsLZ4_compress_default[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsLZ4_compress_default[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsLZ4_compress_default[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcLZ4_compress_default = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoLZ4_compress_default = new v8::CFunctionInfo(*rcLZ4_compress_default, 5, cargsLZ4_compress_default);
  v8::CFunction* pFLZ4_compress_default = new v8::CFunction((const void*)&LZ4_compress_defaultFast, infoLZ4_compress_default);
  SET_FAST_METHOD(isolate, module, "LZ4_compress_default", pFLZ4_compress_default, LZ4_compress_defaultSlow);

  v8::CTypeInfo* cargsLZ4_compress_HC = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsLZ4_compress_HC[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsLZ4_compress_HC[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsLZ4_compress_HC[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsLZ4_compress_HC[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsLZ4_compress_HC[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsLZ4_compress_HC[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcLZ4_compress_HC = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoLZ4_compress_HC = new v8::CFunctionInfo(*rcLZ4_compress_HC, 6, cargsLZ4_compress_HC);
  v8::CFunction* pFLZ4_compress_HC = new v8::CFunction((const void*)&LZ4_compress_HCFast, infoLZ4_compress_HC);
  SET_FAST_METHOD(isolate, module, "LZ4_compress_HC", pFLZ4_compress_HC, LZ4_compress_HCSlow);

  SET_MODULE(isolate, target, "lz4", module);
}
} // namespace lz4
} // namespace spin

extern "C" {
  void* _register_lz4() {
    return (void*)spin::lz4::Init;
  }
}
