
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <rustls.h>
#include <spin.h>

namespace spin {
namespace rustls {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void versionSlow(const FunctionCallbackInfo<Value> &args) {

  rustls_str rc = rustls_version();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((rustls_str*)ab->Data())[0] = rc;
}

void versionFast(void* p, struct FastApiTypedArray* const p_ret) {

  rustls_str r = rustls_version();
  ((rustls_str*)p_ret->data)[0] = r;

}
void client_config_builder_newSlow(const FunctionCallbackInfo<Value> &args) {

  struct rustls_client_config_builder* rc = rustls_client_config_builder_new();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((struct rustls_client_config_builder**)ab->Data())[0] = rc;
}

void client_config_builder_newFast(void* p, struct FastApiTypedArray* const p_ret) {

  struct rustls_client_config_builder* r = rustls_client_config_builder_new();
  ((struct rustls_client_config_builder**)p_ret->data)[0] = r;

}
void client_config_builder_load_roots_from_fileSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  int32_t rc = rustls_client_config_builder_load_roots_from_file(v0, *v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t client_config_builder_load_roots_from_fileFast(void* p, void* p0, struct FastOneByteString* const p1) {
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>(p0);
  struct FastOneByteString* const v1 = p1;
  return rustls_client_config_builder_load_roots_from_file(v0, v1->data);
}
void client_config_builder_set_alpn_protocolsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  const struct rustls_slice_bytes * v1 = reinterpret_cast<const struct rustls_slice_bytes *>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = rustls_client_config_builder_set_alpn_protocols(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t client_config_builder_set_alpn_protocolsFast(void* p, void* p0, struct FastApiTypedArray* const p1, uint32_t p2) {
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>(p0);
  const struct rustls_slice_bytes * v1 = reinterpret_cast<const struct rustls_slice_bytes *>(p1->data);
  uint32_t v2 = p2;
  return rustls_client_config_builder_set_alpn_protocols(v0, v1, v2);
}
void client_config_builder_buildSlow(const FunctionCallbackInfo<Value> &args) {
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const struct rustls_client_config * rc = rustls_client_config_builder_build(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const struct rustls_client_config **)ab->Data())[0] = rc;
}

void client_config_builder_buildFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  struct rustls_client_config_builder * v0 = reinterpret_cast<struct rustls_client_config_builder *>(p0);
  const struct rustls_client_config * r = rustls_client_config_builder_build(v0);
  ((const struct rustls_client_config **)p_ret->data)[0] = r;

}
void client_config_freeSlow(const FunctionCallbackInfo<Value> &args) {
  const struct rustls_client_config * v0 = reinterpret_cast<const struct rustls_client_config *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rustls_client_config_free(v0);
}

void client_config_freeFast(void* p, void* p0) {
  const struct rustls_client_config * v0 = reinterpret_cast<const struct rustls_client_config *>(p0);
  rustls_client_config_free(v0);
}
void client_connection_newSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  const struct rustls_client_config * v0 = reinterpret_cast<const struct rustls_client_config *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  Local<Uint32Array> u322 = args[2].As<Uint32Array>();
  uint8_t* ptr2 = (uint8_t*)u322->Buffer()->Data() + u322->ByteOffset();
  struct rustls_connection ** v2 = reinterpret_cast<struct rustls_connection **>(ptr2);
  int32_t rc = rustls_client_connection_new(v0, *v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t client_connection_newFast(void* p, void* p0, struct FastOneByteString* const p1, struct FastApiTypedArray* const p2) {
  const struct rustls_client_config * v0 = reinterpret_cast<const struct rustls_client_config *>(p0);
  struct FastOneByteString* const v1 = p1;
  struct rustls_connection ** v2 = reinterpret_cast<struct rustls_connection **>(p2->data);
  return rustls_client_connection_new(v0, v1->data, v2);
}
void connection_wants_readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = rustls_connection_wants_read(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_wants_readFast(void* p, void* p0) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  return rustls_connection_wants_read(v0);
}
void connection_read_tlsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rustls_read_callback v1 = reinterpret_cast<rustls_read_callback>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  Local<Uint32Array> u322 = args[2].As<Uint32Array>();
  uint8_t* ptr2 = (uint8_t*)u322->Buffer()->Data() + u322->ByteOffset();
  void* v2 = reinterpret_cast<void*>(ptr2);
  Local<Uint32Array> u323 = args[3].As<Uint32Array>();
  uint8_t* ptr3 = (uint8_t*)u323->Buffer()->Data() + u323->ByteOffset();
  size_t* v3 = reinterpret_cast<size_t*>(ptr3);
  int32_t rc = rustls_connection_read_tls(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_read_tlsFast(void* p, void* p0, void* p1, struct FastApiTypedArray* const p2, struct FastApiTypedArray* const p3) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  rustls_read_callback v1 = reinterpret_cast<rustls_read_callback>(p1);
  void* v2 = reinterpret_cast<void*>(p2->data);
  size_t* v3 = reinterpret_cast<size_t*>(p3->data);
  return rustls_connection_read_tls(v0, v1, v2, v3);
}
void connection_readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  uint8_t* v1 = reinterpret_cast<uint8_t*>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  Local<Uint32Array> u323 = args[3].As<Uint32Array>();
  uint8_t* ptr3 = (uint8_t*)u323->Buffer()->Data() + u323->ByteOffset();
  size_t* v3 = reinterpret_cast<size_t*>(ptr3);
  int32_t rc = rustls_connection_read(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_readFast(void* p, void* p0, struct FastApiTypedArray* const p1, uint32_t p2, struct FastApiTypedArray* const p3) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  uint8_t* v1 = reinterpret_cast<uint8_t*>(p1->data);
  uint32_t v2 = p2;
  size_t* v3 = reinterpret_cast<size_t*>(p3->data);
  return rustls_connection_read(v0, v1, v2, v3);
}
void connection_wants_writeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = rustls_connection_wants_write(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_wants_writeFast(void* p, void* p0) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  return rustls_connection_wants_write(v0);
}
void connection_write_tlsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rustls_write_callback v1 = reinterpret_cast<rustls_write_callback>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  Local<Uint32Array> u322 = args[2].As<Uint32Array>();
  uint8_t* ptr2 = (uint8_t*)u322->Buffer()->Data() + u322->ByteOffset();
  void* v2 = reinterpret_cast<void*>(ptr2);
  Local<Uint32Array> u323 = args[3].As<Uint32Array>();
  uint8_t* ptr3 = (uint8_t*)u323->Buffer()->Data() + u323->ByteOffset();
  size_t* v3 = reinterpret_cast<size_t*>(ptr3);
  int32_t rc = rustls_connection_write_tls(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_write_tlsFast(void* p, void* p0, void* p1, struct FastApiTypedArray* const p2, struct FastApiTypedArray* const p3) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  rustls_write_callback v1 = reinterpret_cast<rustls_write_callback>(p1);
  void* v2 = reinterpret_cast<void*>(p2->data);
  size_t* v3 = reinterpret_cast<size_t*>(p3->data);
  return rustls_connection_write_tls(v0, v1, v2, v3);
}
void connection_writeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  const uint8_t* v1 = reinterpret_cast<const uint8_t*>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  Local<Uint32Array> u323 = args[3].As<Uint32Array>();
  uint8_t* ptr3 = (uint8_t*)u323->Buffer()->Data() + u323->ByteOffset();
  size_t* v3 = reinterpret_cast<size_t*>(ptr3);
  int32_t rc = rustls_connection_write(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_writeFast(void* p, void* p0, struct FastApiTypedArray* const p1, uint32_t p2, struct FastApiTypedArray* const p3) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  const uint8_t* v1 = reinterpret_cast<const uint8_t*>(p1->data);
  uint32_t v2 = p2;
  size_t* v3 = reinterpret_cast<size_t*>(p3->data);
  return rustls_connection_write(v0, v1, v2, v3);
}
void connection_process_new_packetsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = rustls_connection_process_new_packets(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connection_process_new_packetsFast(void* p, void* p0) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  return rustls_connection_process_new_packets(v0);
}
void connection_freeSlow(const FunctionCallbackInfo<Value> &args) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  rustls_connection_free(v0);
}

void connection_freeFast(void* p, void* p0) {
  struct rustls_connection * v0 = reinterpret_cast<struct rustls_connection *>(p0);
  rustls_connection_free(v0);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  v8::CTypeInfo* cargsversion = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsversion[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsversion[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcversion = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoversion = new v8::CFunctionInfo(*rcversion, 2, cargsversion);
  v8::CFunction* pFversion = new v8::CFunction((const void*)&versionFast, infoversion);
  SET_FAST_METHOD(isolate, module, "version", pFversion, versionSlow);
  v8::CTypeInfo* cargsclient_config_builder_new = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsclient_config_builder_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsclient_config_builder_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcclient_config_builder_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoclient_config_builder_new = new v8::CFunctionInfo(*rcclient_config_builder_new, 2, cargsclient_config_builder_new);
  v8::CFunction* pFclient_config_builder_new = new v8::CFunction((const void*)&client_config_builder_newFast, infoclient_config_builder_new);
  SET_FAST_METHOD(isolate, module, "client_config_builder_new", pFclient_config_builder_new, client_config_builder_newSlow);

  v8::CTypeInfo* cargsclient_config_builder_load_roots_from_file = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsclient_config_builder_load_roots_from_file[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclient_config_builder_load_roots_from_file[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsclient_config_builder_load_roots_from_file[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  v8::CTypeInfo* rcclient_config_builder_load_roots_from_file = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoclient_config_builder_load_roots_from_file = new v8::CFunctionInfo(*rcclient_config_builder_load_roots_from_file, 3, cargsclient_config_builder_load_roots_from_file);
  v8::CFunction* pFclient_config_builder_load_roots_from_file = new v8::CFunction((const void*)&client_config_builder_load_roots_from_fileFast, infoclient_config_builder_load_roots_from_file);
  SET_FAST_METHOD(isolate, module, "client_config_builder_load_roots_from_file", pFclient_config_builder_load_roots_from_file, client_config_builder_load_roots_from_fileSlow);

  v8::CTypeInfo* cargsclient_config_builder_set_alpn_protocols = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsclient_config_builder_set_alpn_protocols[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclient_config_builder_set_alpn_protocols[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsclient_config_builder_set_alpn_protocols[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsclient_config_builder_set_alpn_protocols[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcclient_config_builder_set_alpn_protocols = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoclient_config_builder_set_alpn_protocols = new v8::CFunctionInfo(*rcclient_config_builder_set_alpn_protocols, 4, cargsclient_config_builder_set_alpn_protocols);
  v8::CFunction* pFclient_config_builder_set_alpn_protocols = new v8::CFunction((const void*)&client_config_builder_set_alpn_protocolsFast, infoclient_config_builder_set_alpn_protocols);
  SET_FAST_METHOD(isolate, module, "client_config_builder_set_alpn_protocols", pFclient_config_builder_set_alpn_protocols, client_config_builder_set_alpn_protocolsSlow);
  v8::CTypeInfo* cargsclient_config_builder_build = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsclient_config_builder_build[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclient_config_builder_build[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsclient_config_builder_build[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcclient_config_builder_build = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoclient_config_builder_build = new v8::CFunctionInfo(*rcclient_config_builder_build, 3, cargsclient_config_builder_build);
  v8::CFunction* pFclient_config_builder_build = new v8::CFunction((const void*)&client_config_builder_buildFast, infoclient_config_builder_build);
  SET_FAST_METHOD(isolate, module, "client_config_builder_build", pFclient_config_builder_build, client_config_builder_buildSlow);

  v8::CTypeInfo* cargsclient_config_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsclient_config_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclient_config_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcclient_config_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoclient_config_free = new v8::CFunctionInfo(*rcclient_config_free, 2, cargsclient_config_free);
  v8::CFunction* pFclient_config_free = new v8::CFunction((const void*)&client_config_freeFast, infoclient_config_free);
  SET_FAST_METHOD(isolate, module, "client_config_free", pFclient_config_free, client_config_freeSlow);

  v8::CTypeInfo* cargsclient_connection_new = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsclient_connection_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclient_connection_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsclient_connection_new[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsclient_connection_new[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcclient_connection_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoclient_connection_new = new v8::CFunctionInfo(*rcclient_connection_new, 4, cargsclient_connection_new);
  v8::CFunction* pFclient_connection_new = new v8::CFunction((const void*)&client_connection_newFast, infoclient_connection_new);
  SET_FAST_METHOD(isolate, module, "client_connection_new", pFclient_connection_new, client_connection_newSlow);

  v8::CTypeInfo* cargsconnection_wants_read = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsconnection_wants_read[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_wants_read[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcconnection_wants_read = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_wants_read = new v8::CFunctionInfo(*rcconnection_wants_read, 2, cargsconnection_wants_read);
  v8::CFunction* pFconnection_wants_read = new v8::CFunction((const void*)&connection_wants_readFast, infoconnection_wants_read);
  SET_FAST_METHOD(isolate, module, "connection_wants_read", pFconnection_wants_read, connection_wants_readSlow);

  v8::CTypeInfo* cargsconnection_read_tls = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsconnection_read_tls[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_read_tls[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_read_tls[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_read_tls[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsconnection_read_tls[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcconnection_read_tls = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_read_tls = new v8::CFunctionInfo(*rcconnection_read_tls, 5, cargsconnection_read_tls);
  v8::CFunction* pFconnection_read_tls = new v8::CFunction((const void*)&connection_read_tlsFast, infoconnection_read_tls);
  SET_FAST_METHOD(isolate, module, "connection_read_tls", pFconnection_read_tls, connection_read_tlsSlow);

  v8::CTypeInfo* cargsconnection_read = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsconnection_read[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_read[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_read[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsconnection_read[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsconnection_read[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcconnection_read = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_read = new v8::CFunctionInfo(*rcconnection_read, 5, cargsconnection_read);
  v8::CFunction* pFconnection_read = new v8::CFunction((const void*)&connection_readFast, infoconnection_read);
  SET_FAST_METHOD(isolate, module, "connection_read", pFconnection_read, connection_readSlow);

  v8::CTypeInfo* cargsconnection_wants_write = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsconnection_wants_write[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_wants_write[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcconnection_wants_write = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_wants_write = new v8::CFunctionInfo(*rcconnection_wants_write, 2, cargsconnection_wants_write);
  v8::CFunction* pFconnection_wants_write = new v8::CFunction((const void*)&connection_wants_writeFast, infoconnection_wants_write);
  SET_FAST_METHOD(isolate, module, "connection_wants_write", pFconnection_wants_write, connection_wants_writeSlow);

  v8::CTypeInfo* cargsconnection_write_tls = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsconnection_write_tls[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_write_tls[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_write_tls[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_write_tls[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsconnection_write_tls[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcconnection_write_tls = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_write_tls = new v8::CFunctionInfo(*rcconnection_write_tls, 5, cargsconnection_write_tls);
  v8::CFunction* pFconnection_write_tls = new v8::CFunction((const void*)&connection_write_tlsFast, infoconnection_write_tls);
  SET_FAST_METHOD(isolate, module, "connection_write_tls", pFconnection_write_tls, connection_write_tlsSlow);

  v8::CTypeInfo* cargsconnection_write = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsconnection_write[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_write[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsconnection_write[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsconnection_write[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsconnection_write[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcconnection_write = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_write = new v8::CFunctionInfo(*rcconnection_write, 5, cargsconnection_write);
  v8::CFunction* pFconnection_write = new v8::CFunction((const void*)&connection_writeFast, infoconnection_write);
  SET_FAST_METHOD(isolate, module, "connection_write", pFconnection_write, connection_writeSlow);

  v8::CTypeInfo* cargsconnection_process_new_packets = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsconnection_process_new_packets[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_process_new_packets[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcconnection_process_new_packets = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnection_process_new_packets = new v8::CFunctionInfo(*rcconnection_process_new_packets, 2, cargsconnection_process_new_packets);
  v8::CFunction* pFconnection_process_new_packets = new v8::CFunction((const void*)&connection_process_new_packetsFast, infoconnection_process_new_packets);
  SET_FAST_METHOD(isolate, module, "connection_process_new_packets", pFconnection_process_new_packets, connection_process_new_packetsSlow);

  v8::CTypeInfo* cargsconnection_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsconnection_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnection_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcconnection_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoconnection_free = new v8::CFunctionInfo(*rcconnection_free, 2, cargsconnection_free);
  v8::CFunction* pFconnection_free = new v8::CFunction((const void*)&connection_freeFast, infoconnection_free);
  SET_FAST_METHOD(isolate, module, "connection_free", pFconnection_free, connection_freeSlow);

  SET_MODULE(isolate, target, "rustls", module);
}
} // namespace rustls
} // namespace spin

extern "C" {
  void* _register_rustls() {
    return (void*)spin::rustls::Init;
  }
}
