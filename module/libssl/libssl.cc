
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <openssl/opensslv.h>
#include <openssl/err.h>
#include <openssl/dh.h>
#include <openssl/ssl.h>
#include <openssl/conf.h>
#include <openssl/engine.h>
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <atomic>
#include <spin.h>

namespace spin {
namespace libssl {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void OpenSSL_versionSlow(const FunctionCallbackInfo<Value> &args) {
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  const char* rc = OpenSSL_version(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void OpenSSL_versionFast(void* p, int32_t p0, struct FastApiTypedArray* const p_ret) {
  int32_t v0 = p0;
  const char* r = OpenSSL_version(v0);
  ((const char**)p_ret->data)[0] = r;

}
void EVP_PKEY_CTX_new_idSlow(const FunctionCallbackInfo<Value> &args) {
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  ENGINE* v1 = reinterpret_cast<ENGINE*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  EVP_PKEY_CTX* rc = EVP_PKEY_CTX_new_id(v0, v1);
  Local<ArrayBuffer> ab = args[2].As<Uint32Array>()->Buffer();
  ((EVP_PKEY_CTX**)ab->Data())[0] = rc;
}

void EVP_PKEY_CTX_new_idFast(void* p, int32_t p0, void* p1, struct FastApiTypedArray* const p_ret) {
  int32_t v0 = p0;
  ENGINE* v1 = reinterpret_cast<ENGINE*>(p1);
  EVP_PKEY_CTX* r = EVP_PKEY_CTX_new_id(v0, v1);
  ((EVP_PKEY_CTX**)p_ret->data)[0] = r;

}
void EVP_PKEY_keygen_initSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = EVP_PKEY_keygen_init(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_PKEY_keygen_initFast(void* p, void* p0) {
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>(p0);
  return EVP_PKEY_keygen_init(v0);
}
void EVP_PKEY_keygenSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY** v1 = reinterpret_cast<EVP_PKEY**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = EVP_PKEY_keygen(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_PKEY_keygenFast(void* p, void* p0, void* p1) {
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>(p0);
  EVP_PKEY** v1 = reinterpret_cast<EVP_PKEY**>(p1);
  return EVP_PKEY_keygen(v0, v1);
}
void EVP_PKEY_newSlow(const FunctionCallbackInfo<Value> &args) {

  EVP_PKEY* rc = EVP_PKEY_new();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((EVP_PKEY**)ab->Data())[0] = rc;
}

void EVP_PKEY_newFast(void* p, struct FastApiTypedArray* const p_ret) {

  EVP_PKEY* r = EVP_PKEY_new();
  ((EVP_PKEY**)p_ret->data)[0] = r;

}
void EVP_PKEY_assignSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  void* v2 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  int32_t rc = EVP_PKEY_assign(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_PKEY_assignFast(void* p, void* p0, int32_t p1, void* p2) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>(p0);
  int32_t v1 = p1;
  void* v2 = reinterpret_cast<void*>(p2);
  return EVP_PKEY_assign(v0, v1, v2);
}
void EVP_PKEY_idSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = EVP_PKEY_id(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_PKEY_idFast(void* p, void* p0) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>(p0);
  return EVP_PKEY_id(v0);
}
void EVP_PKEY_typeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t rc = EVP_PKEY_type(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_PKEY_typeFast(void* p, int32_t p0) {
  int32_t v0 = p0;
  return EVP_PKEY_type(v0);
}
void EVP_PKEY_get1_RSASlow(const FunctionCallbackInfo<Value> &args) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  RSA* rc = EVP_PKEY_get1_RSA(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((RSA**)ab->Data())[0] = rc;
}

void EVP_PKEY_get1_RSAFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>(p0);
  RSA* r = EVP_PKEY_get1_RSA(v0);
  ((RSA**)p_ret->data)[0] = r;

}
void EVP_PKEY_freeSlow(const FunctionCallbackInfo<Value> &args) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY_free(v0);
}

void EVP_PKEY_freeFast(void* p, void* p0) {
  EVP_PKEY* v0 = reinterpret_cast<EVP_PKEY*>(p0);
  EVP_PKEY_free(v0);
}
void EVP_PKEY_CTX_freeSlow(const FunctionCallbackInfo<Value> &args) {
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY_CTX_free(v0);
}

void EVP_PKEY_CTX_freeFast(void* p, void* p0) {
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>(p0);
  EVP_PKEY_CTX_free(v0);
}
void EVP_MD_CTX_newSlow(const FunctionCallbackInfo<Value> &args) {

  EVP_MD_CTX* rc = EVP_MD_CTX_new();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((EVP_MD_CTX**)ab->Data())[0] = rc;
}

void EVP_MD_CTX_newFast(void* p, struct FastApiTypedArray* const p_ret) {

  EVP_MD_CTX* r = EVP_MD_CTX_new();
  ((EVP_MD_CTX**)p_ret->data)[0] = r;

}
void EVP_MD_CTX_resetSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = EVP_MD_CTX_reset(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_MD_CTX_resetFast(void* p, void* p0) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  return EVP_MD_CTX_reset(v0);
}
void EVP_MD_CTX_freeSlow(const FunctionCallbackInfo<Value> &args) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_MD_CTX_free(v0);
}

void EVP_MD_CTX_freeFast(void* p, void* p0) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  EVP_MD_CTX_free(v0);
}
void EVP_get_digestbynidSlow(const FunctionCallbackInfo<Value> &args) {
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  const EVP_MD* rc = EVP_get_digestbynid(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_get_digestbynidFast(void* p, int32_t p0, struct FastApiTypedArray* const p_ret) {
  int32_t v0 = p0;
  const EVP_MD* r = EVP_get_digestbynid(v0);
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_get_digestbynameSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  String::Utf8Value v0(isolate, args[0]);
  const EVP_MD* rc = EVP_get_digestbyname(*v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_get_digestbynameFast(void* p, struct FastOneByteString* const p0, struct FastApiTypedArray* const p_ret) {
  struct FastOneByteString* const v0 = p0;
  const EVP_MD* r = EVP_get_digestbyname(v0->data);
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_DigestSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  void* v0 = reinterpret_cast<void*>(args[0].As<Uint8Array>()->Buffer()->Data());
  uint32_t v1 = Local<Integer>::Cast(args[1])->Value();
  unsigned char* v2 = reinterpret_cast<unsigned char*>(args[2].As<Uint8Array>()->Buffer()->Data());
  unsigned int* v3 = reinterpret_cast<unsigned int*>(args[3].As<Uint8Array>()->Buffer()->Data());
  const EVP_MD* v4 = reinterpret_cast<const EVP_MD*>((uint64_t)Local<Integer>::Cast(args[4])->Value());
  ENGINE* v5 = reinterpret_cast<ENGINE*>((uint64_t)Local<Integer>::Cast(args[5])->Value());
  int32_t rc = EVP_Digest(v0, v1, v2, v3, v4, v5);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestFast(void* p, struct FastApiTypedArray* const p0, uint32_t p1, struct FastApiTypedArray* const p2, struct FastApiTypedArray* const p3, void* p4, void* p5) {
  void* v0 = reinterpret_cast<void*>(p0->data);
  uint32_t v1 = p1;
  unsigned char* v2 = reinterpret_cast<unsigned char*>(p2->data);
  unsigned int* v3 = reinterpret_cast<unsigned int*>(p3->data);
  const EVP_MD* v4 = reinterpret_cast<const EVP_MD*>(p4);
  ENGINE* v5 = reinterpret_cast<ENGINE*>(p5);
  return EVP_Digest(v0, v1, v2, v3, v4, v5);
}
void EVP_DigestInit_exSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_MD* v1 = reinterpret_cast<EVP_MD*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  ENGINE* v2 = reinterpret_cast<ENGINE*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  int32_t rc = EVP_DigestInit_ex(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestInit_exFast(void* p, void* p0, void* p1, void* p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  EVP_MD* v1 = reinterpret_cast<EVP_MD*>(p1);
  ENGINE* v2 = reinterpret_cast<ENGINE*>(p2);
  return EVP_DigestInit_ex(v0, v1, v2);
}
void EVP_DigestUpdateBufferSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  void* v1 = reinterpret_cast<void*>(args[1].As<Uint8Array>()->Buffer()->Data());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = EVP_DigestUpdate(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestUpdateBufferFast(void* p, void* p0, struct FastApiTypedArray* const p1, uint32_t p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  void* v1 = reinterpret_cast<void*>(p1->data);
  uint32_t v2 = p2;
  return EVP_DigestUpdate(v0, v1, v2);
}
void EVP_DigestUpdateStringSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = EVP_DigestUpdate(v0, *v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestUpdateStringFast(void* p, void* p0, struct FastOneByteString* const p1, uint32_t p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  struct FastOneByteString* const v1 = p1;
  uint32_t v2 = p2;
  return EVP_DigestUpdate(v0, v1->data, v2);
}
void EVP_DigestVerifyFinalSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = EVP_DigestVerifyFinal(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestVerifyFinalFast(void* p, void* p0, void* p1, uint32_t p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  return EVP_DigestVerifyFinal(v0, v1, v2);
}
void EVP_DigestSignFinalSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  unsigned char* v1 = reinterpret_cast<unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  size_t* v2 = reinterpret_cast<size_t*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  int32_t rc = EVP_DigestSignFinal(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestSignFinalFast(void* p, void* p0, void* p1, void* p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  unsigned char* v1 = reinterpret_cast<unsigned char*>(p1);
  size_t* v2 = reinterpret_cast<size_t*>(p2);
  return EVP_DigestSignFinal(v0, v1, v2);
}
void EVP_DigestFinalSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  unsigned char* v1 = reinterpret_cast<unsigned char*>(args[1].As<Uint8Array>()->Buffer()->Data());
  unsigned int* v2 = reinterpret_cast<unsigned int*>(args[2].As<Uint32Array>()->Buffer()->Data());
  int32_t rc = EVP_DigestFinal(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestFinalFast(void* p, void* p0, struct FastApiTypedArray* const p1, struct FastApiTypedArray* const p2) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  unsigned char* v1 = reinterpret_cast<unsigned char*>(p1->data);
  unsigned int* v2 = reinterpret_cast<unsigned int*>(p2->data);
  return EVP_DigestFinal(v0, v1, v2);
}
void EVP_sha1Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha1();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha1Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha1();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_sha224Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha224();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha224Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha224();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_sha256Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha256();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha256Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha256();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_sha384Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha384();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha384Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha384();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_sha512Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha512();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha512Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha512();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_sha512_256Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha512_256();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha512_256Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha512_256();
  ((const EVP_MD**)p_ret->data)[0] = r;

}
void EVP_DigestVerifyInitSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY_CTX** v1 = reinterpret_cast<EVP_PKEY_CTX**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  EVP_MD* v2 = reinterpret_cast<EVP_MD*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  ENGINE* v3 = reinterpret_cast<ENGINE*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  EVP_PKEY* v4 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[4])->Value());
  int32_t rc = EVP_DigestVerifyInit(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestVerifyInitFast(void* p, void* p0, void* p1, void* p2, void* p3, void* p4) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  EVP_PKEY_CTX** v1 = reinterpret_cast<EVP_PKEY_CTX**>(p1);
  EVP_MD* v2 = reinterpret_cast<EVP_MD*>(p2);
  ENGINE* v3 = reinterpret_cast<ENGINE*>(p3);
  EVP_PKEY* v4 = reinterpret_cast<EVP_PKEY*>(p4);
  return EVP_DigestVerifyInit(v0, v1, v2, v3, v4);
}
void EVP_DigestSignInitSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY_CTX** v1 = reinterpret_cast<EVP_PKEY_CTX**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  EVP_MD* v2 = reinterpret_cast<EVP_MD*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  ENGINE* v3 = reinterpret_cast<ENGINE*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  EVP_PKEY* v4 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[4])->Value());
  int32_t rc = EVP_DigestSignInit(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t EVP_DigestSignInitFast(void* p, void* p0, void* p1, void* p2, void* p3, void* p4) {
  EVP_MD_CTX* v0 = reinterpret_cast<EVP_MD_CTX*>(p0);
  EVP_PKEY_CTX** v1 = reinterpret_cast<EVP_PKEY_CTX**>(p1);
  EVP_MD* v2 = reinterpret_cast<EVP_MD*>(p2);
  ENGINE* v3 = reinterpret_cast<ENGINE*>(p3);
  EVP_PKEY* v4 = reinterpret_cast<EVP_PKEY*>(p4);
  return EVP_DigestSignInit(v0, v1, v2, v3, v4);
}
void BIO_s_memSlow(const FunctionCallbackInfo<Value> &args) {

  const BIO_METHOD* rc = BIO_s_mem();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const BIO_METHOD**)ab->Data())[0] = rc;
}

void BIO_s_memFast(void* p, struct FastApiTypedArray* const p_ret) {

  const BIO_METHOD* r = BIO_s_mem();
  ((const BIO_METHOD**)p_ret->data)[0] = r;

}
void BIO_newSlow(const FunctionCallbackInfo<Value> &args) {
  BIO_METHOD* v0 = reinterpret_cast<BIO_METHOD*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  BIO * rc = BIO_new(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((BIO **)ab->Data())[0] = rc;
}

void BIO_newFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  BIO_METHOD* v0 = reinterpret_cast<BIO_METHOD*>(p0);
  BIO * r = BIO_new(v0);
  ((BIO **)p_ret->data)[0] = r;

}
void BIO_new_mem_bufSlow(const FunctionCallbackInfo<Value> &args) {
  const void* v0 = reinterpret_cast<const void*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  BIO* rc = BIO_new_mem_buf(v0, v1);
  Local<ArrayBuffer> ab = args[2].As<Uint32Array>()->Buffer();
  ((BIO**)ab->Data())[0] = rc;
}

void BIO_new_mem_bufFast(void* p, void* p0, int32_t p1, struct FastApiTypedArray* const p_ret) {
  const void* v0 = reinterpret_cast<const void*>(p0);
  int32_t v1 = p1;
  BIO* r = BIO_new_mem_buf(v0, v1);
  ((BIO**)p_ret->data)[0] = r;

}
void BIO_ctrlSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  uint64_t v2 = Local<Integer>::Cast(args[2])->Value();
  void* v3 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  int32_t rc = BIO_ctrl(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t BIO_ctrlFast(void* p, void* p0, int32_t p1, uint64_t p2, void* p3) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  int32_t v1 = p1;
  uint64_t v2 = p2;
  void* v3 = reinterpret_cast<void*>(p3);
  return BIO_ctrl(v0, v1, v2, v3);
}
void BIO_readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  void* v1 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = BIO_read(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t BIO_readFast(void* p, void* p0, void* p1, int32_t p2) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  void* v1 = reinterpret_cast<void*>(p1);
  int32_t v2 = p2;
  return BIO_read(v0, v1, v2);
}
void PEM_write_bio_PrivateKeySlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  EVP_CIPHER* v2 = reinterpret_cast<EVP_CIPHER*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  unsigned char* v3 = reinterpret_cast<unsigned char*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  int32_t v4 = Local<Integer>::Cast(args[4])->Value();
  pem_password_cb* v5 = reinterpret_cast<pem_password_cb*>((uint64_t)Local<Integer>::Cast(args[5])->Value());
  void* v6 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[6])->Value());
  int32_t rc = PEM_write_bio_PrivateKey(v0, v1, v2, v3, v4, v5, v6);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t PEM_write_bio_PrivateKeyFast(void* p, void* p0, void* p1, void* p2, void* p3, int32_t p4, void* p5, void* p6) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>(p1);
  EVP_CIPHER* v2 = reinterpret_cast<EVP_CIPHER*>(p2);
  unsigned char* v3 = reinterpret_cast<unsigned char*>(p3);
  int32_t v4 = p4;
  pem_password_cb* v5 = reinterpret_cast<pem_password_cb*>(p5);
  void* v6 = reinterpret_cast<void*>(p6);
  return PEM_write_bio_PrivateKey(v0, v1, v2, v3, v4, v5, v6);
}
void PEM_write_bio_PUBKEYSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = PEM_write_bio_PUBKEY(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t PEM_write_bio_PUBKEYFast(void* p, void* p0, void* p1) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>(p1);
  return PEM_write_bio_PUBKEY(v0, v1);
}
void PEM_write_bio_X509_REQSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509_REQ* v1 = reinterpret_cast<X509_REQ*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = PEM_write_bio_X509_REQ(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t PEM_write_bio_X509_REQFast(void* p, void* p0, void* p1) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  X509_REQ* v1 = reinterpret_cast<X509_REQ*>(p1);
  return PEM_write_bio_X509_REQ(v0, v1);
}
void PEM_read_bio_RSA_PUBKEYSlow(const FunctionCallbackInfo<Value> &args) {
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  RSA** v1 = reinterpret_cast<RSA**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  void* v3 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  RSA* rc = PEM_read_bio_RSA_PUBKEY(v0, v1, v2, v3);
  Local<ArrayBuffer> ab = args[4].As<Uint32Array>()->Buffer();
  ((RSA**)ab->Data())[0] = rc;
}

void PEM_read_bio_RSA_PUBKEYFast(void* p, void* p0, void* p1, void* p2, void* p3, struct FastApiTypedArray* const p_ret) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  RSA** v1 = reinterpret_cast<RSA**>(p1);
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>(p2);
  void* v3 = reinterpret_cast<void*>(p3);
  RSA* r = PEM_read_bio_RSA_PUBKEY(v0, v1, v2, v3);
  ((RSA**)p_ret->data)[0] = r;

}
void PEM_read_bio_RSAPrivateKeySlow(const FunctionCallbackInfo<Value> &args) {
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  RSA** v1 = reinterpret_cast<RSA**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  void* v3 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  RSA* rc = PEM_read_bio_RSAPrivateKey(v0, v1, v2, v3);
  Local<ArrayBuffer> ab = args[4].As<Uint32Array>()->Buffer();
  ((RSA**)ab->Data())[0] = rc;
}

void PEM_read_bio_RSAPrivateKeyFast(void* p, void* p0, void* p1, void* p2, void* p3, struct FastApiTypedArray* const p_ret) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  RSA** v1 = reinterpret_cast<RSA**>(p1);
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>(p2);
  void* v3 = reinterpret_cast<void*>(p3);
  RSA* r = PEM_read_bio_RSAPrivateKey(v0, v1, v2, v3);
  ((RSA**)p_ret->data)[0] = r;

}
void PEM_read_bio_X509Slow(const FunctionCallbackInfo<Value> &args) {
  BIO* v0 = reinterpret_cast<BIO*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509** v1 = reinterpret_cast<X509**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  void* v3 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  X509* rc = PEM_read_bio_X509(v0, v1, v2, v3);
  Local<ArrayBuffer> ab = args[4].As<Uint32Array>()->Buffer();
  ((X509**)ab->Data())[0] = rc;
}

void PEM_read_bio_X509Fast(void* p, void* p0, void* p1, void* p2, void* p3, struct FastApiTypedArray* const p_ret) {
  BIO* v0 = reinterpret_cast<BIO*>(p0);
  X509** v1 = reinterpret_cast<X509**>(p1);
  pem_password_cb* v2 = reinterpret_cast<pem_password_cb*>(p2);
  void* v3 = reinterpret_cast<void*>(p3);
  X509* r = PEM_read_bio_X509(v0, v1, v2, v3);
  ((X509**)p_ret->data)[0] = r;

}
void X509_get_subject_nameSlow(const FunctionCallbackInfo<Value> &args) {
  const X509* v0 = reinterpret_cast<const X509*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509_NAME* rc = X509_get_subject_name(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((X509_NAME**)ab->Data())[0] = rc;
}

void X509_get_subject_nameFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const X509* v0 = reinterpret_cast<const X509*>(p0);
  X509_NAME* r = X509_get_subject_name(v0);
  ((X509_NAME**)p_ret->data)[0] = r;

}
void X509_get_pubkeySlow(const FunctionCallbackInfo<Value> &args) {
  X509* v0 = reinterpret_cast<X509*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY* rc = X509_get_pubkey(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((EVP_PKEY**)ab->Data())[0] = rc;
}

void X509_get_pubkeyFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  X509* v0 = reinterpret_cast<X509*>(p0);
  EVP_PKEY* r = X509_get_pubkey(v0);
  ((EVP_PKEY**)p_ret->data)[0] = r;

}
void X509_NAME_onelineSlow(const FunctionCallbackInfo<Value> &args) {
  const X509_NAME* v0 = reinterpret_cast<const X509_NAME*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  char* v1 = reinterpret_cast<char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  char* rc = X509_NAME_oneline(v0, v1, v2);
  Local<ArrayBuffer> ab = args[3].As<Uint32Array>()->Buffer();
  ((char**)ab->Data())[0] = rc;
}

void X509_NAME_onelineFast(void* p, void* p0, void* p1, int32_t p2, struct FastApiTypedArray* const p_ret) {
  const X509_NAME* v0 = reinterpret_cast<const X509_NAME*>(p0);
  char* v1 = reinterpret_cast<char*>(p1);
  int32_t v2 = p2;
  char* r = X509_NAME_oneline(v0, v1, v2);
  ((char**)p_ret->data)[0] = r;

}
void X509_get_issuer_nameSlow(const FunctionCallbackInfo<Value> &args) {
  const X509* v0 = reinterpret_cast<const X509*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509_NAME* rc = X509_get_issuer_name(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((X509_NAME**)ab->Data())[0] = rc;
}

void X509_get_issuer_nameFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const X509* v0 = reinterpret_cast<const X509*>(p0);
  X509_NAME* r = X509_get_issuer_name(v0);
  ((X509_NAME**)p_ret->data)[0] = r;

}
void X509_freeSlow(const FunctionCallbackInfo<Value> &args) {
  X509* v0 = reinterpret_cast<X509*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509_free(v0);
}

void X509_freeFast(void* p, void* p0) {
  X509* v0 = reinterpret_cast<X509*>(p0);
  X509_free(v0);
}
void X509_REQ_newSlow(const FunctionCallbackInfo<Value> &args) {

  X509_REQ* rc = X509_REQ_new();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((X509_REQ**)ab->Data())[0] = rc;
}

void X509_REQ_newFast(void* p, struct FastApiTypedArray* const p_ret) {

  X509_REQ* r = X509_REQ_new();
  ((X509_REQ**)p_ret->data)[0] = r;

}
void X509_REQ_set_versionSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = X509_REQ_set_version(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t X509_REQ_set_versionFast(void* p, void* p0, uint32_t p1) {
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>(p0);
  uint32_t v1 = p1;
  return X509_REQ_set_version(v0, v1);
}
void X509_REQ_get_subject_nameSlow(const FunctionCallbackInfo<Value> &args) {
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509_NAME* rc = X509_REQ_get_subject_name(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((X509_NAME**)ab->Data())[0] = rc;
}

void X509_REQ_get_subject_nameFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>(p0);
  X509_NAME* r = X509_REQ_get_subject_name(v0);
  ((X509_NAME**)p_ret->data)[0] = r;

}
void X509_NAME_add_entry_by_txtSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  X509_NAME* v0 = reinterpret_cast<X509_NAME*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  const unsigned char* v3 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  int32_t v4 = Local<Integer>::Cast(args[4])->Value();
  int32_t v5 = Local<Integer>::Cast(args[5])->Value();
  int32_t v6 = Local<Integer>::Cast(args[6])->Value();
  int32_t rc = X509_NAME_add_entry_by_txt(v0, v1, v2, v3, v4, v5, v6);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t X509_NAME_add_entry_by_txtFast(void* p, void* p0, void* p1, int32_t p2, void* p3, int32_t p4, int32_t p5, int32_t p6) {
  X509_NAME* v0 = reinterpret_cast<X509_NAME*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  int32_t v2 = p2;
  const unsigned char* v3 = reinterpret_cast<const unsigned char*>(p3);
  int32_t v4 = p4;
  int32_t v5 = p5;
  int32_t v6 = p6;
  return X509_NAME_add_entry_by_txt(v0, v1, v2, v3, v4, v5, v6);
}
void X509_REQ_set_pubkeySlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = X509_REQ_set_pubkey(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t X509_REQ_set_pubkeyFast(void* p, void* p0, void* p1) {
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>(p0);
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>(p1);
  return X509_REQ_set_pubkey(v0, v1);
}
void X509_REQ_signSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  const EVP_MD* v2 = reinterpret_cast<const EVP_MD*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  int32_t rc = X509_REQ_sign(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t X509_REQ_signFast(void* p, void* p0, void* p1, void* p2) {
  X509_REQ* v0 = reinterpret_cast<X509_REQ*>(p0);
  EVP_PKEY* v1 = reinterpret_cast<EVP_PKEY*>(p1);
  const EVP_MD* v2 = reinterpret_cast<const EVP_MD*>(p2);
  return X509_REQ_sign(v0, v1, v2);
}
void OBJ_txt2nidSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  const char* v0 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = OBJ_txt2nid(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t OBJ_txt2nidFast(void* p, void* p0) {
  const char* v0 = reinterpret_cast<const char*>(p0);
  return OBJ_txt2nid(v0);
}
void SSL_get_errorSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = SSL_get_error(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_get_errorFast(void* p, void* p0, int32_t p1) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  int32_t v1 = p1;
  return SSL_get_error(v0, v1);
}
void SSL_shutdownSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = SSL_shutdown(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_shutdownFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  return SSL_shutdown(v0);
}
void SSL_get_servernameSlow(const FunctionCallbackInfo<Value> &args) {
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  const char* rc = SSL_get_servername(v0, v1);
  Local<ArrayBuffer> ab = args[2].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void SSL_get_servernameFast(void* p, void* p0, int32_t p1, struct FastApiTypedArray* const p_ret) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  int32_t v1 = p1;
  const char* r = SSL_get_servername(v0, v1);
  ((const char**)p_ret->data)[0] = r;

}
void SSL_get_servername_typeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = SSL_get_servername_type(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_get_servername_typeFast(void* p, void* p0) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  return SSL_get_servername_type(v0);
}
void SSL_freeSlow(const FunctionCallbackInfo<Value> &args) {
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_free(v0);
}

void SSL_freeFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  SSL_free(v0);
}
void SSL_readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  void* v1 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = SSL_read(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_readFast(void* p, void* p0, void* p1, int32_t p2) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  void* v1 = reinterpret_cast<void*>(p1);
  int32_t v2 = p2;
  return SSL_read(v0, v1, v2);
}
void SSL_writeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  void* v1 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = SSL_write(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_writeFast(void* p, void* p0, void* p1, int32_t p2) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  void* v1 = reinterpret_cast<void*>(p1);
  int32_t v2 = p2;
  return SSL_write(v0, v1, v2);
}
void SSL_get_versionSlow(const FunctionCallbackInfo<Value> &args) {
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* rc = SSL_get_version(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void SSL_get_versionFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  const char* r = SSL_get_version(v0);
  ((const char**)p_ret->data)[0] = r;

}
void SSL_CIPHER_get_nameSlow(const FunctionCallbackInfo<Value> &args) {
  const SSL_CIPHER* v0 = reinterpret_cast<const SSL_CIPHER*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* rc = SSL_CIPHER_get_name(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void SSL_CIPHER_get_nameFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const SSL_CIPHER* v0 = reinterpret_cast<const SSL_CIPHER*>(p0);
  const char* r = SSL_CIPHER_get_name(v0);
  ((const char**)p_ret->data)[0] = r;

}
void SSL_get_current_cipherSlow(const FunctionCallbackInfo<Value> &args) {
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const SSL_CIPHER* rc = SSL_get_current_cipher(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const SSL_CIPHER**)ab->Data())[0] = rc;
}

void SSL_get_current_cipherFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  const SSL_CIPHER* r = SSL_get_current_cipher(v0);
  ((const SSL_CIPHER**)p_ret->data)[0] = r;

}
void SSL_get_peer_certificateSlow(const FunctionCallbackInfo<Value> &args) {
  const SSL* v0 = reinterpret_cast<const SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  X509* rc = SSL_get_peer_certificate(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((X509**)ab->Data())[0] = rc;
}

void SSL_get_peer_certificateFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  const SSL* v0 = reinterpret_cast<const SSL*>(p0);
  X509* r = SSL_get_peer_certificate(v0);
  ((X509**)p_ret->data)[0] = r;

}
void SSL_do_handshakeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = SSL_do_handshake(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_do_handshakeFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  return SSL_do_handshake(v0);
}
void SSL_set_SSL_CTXSlow(const FunctionCallbackInfo<Value> &args) {
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_CTX* v1 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  SSL_CTX* rc = SSL_set_SSL_CTX(v0, v1);
  Local<ArrayBuffer> ab = args[2].As<Uint32Array>()->Buffer();
  ((SSL_CTX**)ab->Data())[0] = rc;
}

void SSL_set_SSL_CTXFast(void* p, void* p0, void* p1, struct FastApiTypedArray* const p_ret) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  SSL_CTX* v1 = reinterpret_cast<SSL_CTX*>(p1);
  SSL_CTX* r = SSL_set_SSL_CTX(v0, v1);
  ((SSL_CTX**)p_ret->data)[0] = r;

}
void SSL_newSlow(const FunctionCallbackInfo<Value> &args) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL* rc = SSL_new(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((SSL**)ab->Data())[0] = rc;
}

void SSL_newFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  SSL* r = SSL_new(v0);
  ((SSL**)p_ret->data)[0] = r;

}
void SSL_set_fdSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = SSL_set_fd(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_set_fdFast(void* p, void* p0, int32_t p1) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  int32_t v1 = p1;
  return SSL_set_fd(v0, v1);
}
void SSL_set_accept_stateSlow(const FunctionCallbackInfo<Value> &args) {
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_set_accept_state(v0);
}

void SSL_set_accept_stateFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  SSL_set_accept_state(v0);
}
void SSL_acceptSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = SSL_accept(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_acceptFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  return SSL_accept(v0);
}
void SSL_set_connect_stateSlow(const FunctionCallbackInfo<Value> &args) {
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_set_connect_state(v0);
}

void SSL_set_connect_stateFast(void* p, void* p0) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  SSL_set_connect_state(v0);
}
void SSL_CTX_newSlow(const FunctionCallbackInfo<Value> &args) {
  SSL_METHOD* v0 = reinterpret_cast<SSL_METHOD*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_CTX* rc = SSL_CTX_new(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((SSL_CTX**)ab->Data())[0] = rc;
}

void SSL_CTX_newFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  SSL_METHOD* v0 = reinterpret_cast<SSL_METHOD*>(p0);
  SSL_CTX* r = SSL_CTX_new(v0);
  ((SSL_CTX**)p_ret->data)[0] = r;

}
void SSL_CTX_use_certificate_fileSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = SSL_CTX_use_certificate_file(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_CTX_use_certificate_fileFast(void* p, void* p0, void* p1, int32_t p2) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  int32_t v2 = p2;
  return SSL_CTX_use_certificate_file(v0, v1, v2);
}
void SSL_CTX_use_certificate_chain_fileSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = SSL_CTX_use_certificate_chain_file(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_CTX_use_certificate_chain_fileFast(void* p, void* p0, void* p1) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  return SSL_CTX_use_certificate_chain_file(v0, v1);
}
void SSL_CTX_use_PrivateKey_fileSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = SSL_CTX_use_PrivateKey_file(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_CTX_use_PrivateKey_fileFast(void* p, void* p0, void* p1, int32_t p2) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  int32_t v2 = p2;
  return SSL_CTX_use_PrivateKey_file(v0, v1, v2);
}
void SSL_CTX_set_optionsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint64_t v1 = Local<Integer>::Cast(args[1])->Value();
  uint64_t rc = SSL_CTX_set_options(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, static_cast<uint64_t>(rc)));
}

void SSL_CTX_set_optionsFast(void* p, void* p0, uint64_t p1, struct FastApiTypedArray* const p_ret) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  uint64_t v1 = p1;
  uint64_t r = SSL_CTX_set_options(v0, v1);
  ((uint64_t*)p_ret->data)[0] = r;

}
void SSL_CTX_set_cipher_listSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = SSL_CTX_set_cipher_list(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_CTX_set_cipher_listFast(void* p, void* p0, void* p1) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  return SSL_CTX_set_cipher_list(v0, v1);
}
void SSL_set_cipher_listSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = SSL_set_cipher_list(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_set_cipher_listFast(void* p, void* p0, void* p1) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  return SSL_set_cipher_list(v0, v1);
}
void SSL_CTX_freeSlow(const FunctionCallbackInfo<Value> &args) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  SSL_CTX_free(v0);
}

void SSL_CTX_freeFast(void* p, void* p0) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  SSL_CTX_free(v0);
}
void TLS_server_methodSlow(const FunctionCallbackInfo<Value> &args) {

  TLS_server_method();
}

void TLS_server_methodFast(void* p) {

  TLS_server_method();
}
void TLS_client_methodSlow(const FunctionCallbackInfo<Value> &args) {

  TLS_client_method();
}

void TLS_client_methodFast(void* p) {

  TLS_client_method();
}
void SSL_CTX_set_ciphersuitesSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* v1 = reinterpret_cast<const char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = SSL_CTX_set_ciphersuites(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t SSL_CTX_set_ciphersuitesFast(void* p, void* p0, void* p1) {
  SSL_CTX* v0 = reinterpret_cast<SSL_CTX*>(p0);
  const char* v1 = reinterpret_cast<const char*>(p1);
  return SSL_CTX_set_ciphersuites(v0, v1);
}
void SSL_ctrlSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  SSL* v0 = reinterpret_cast<SSL*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  uint64_t v2 = Local<Integer>::Cast(args[2])->Value();
  void* v3 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  uint64_t rc = SSL_ctrl(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, static_cast<uint64_t>(rc)));
}

void SSL_ctrlFast(void* p, void* p0, int32_t p1, uint64_t p2, void* p3, struct FastApiTypedArray* const p_ret) {
  SSL* v0 = reinterpret_cast<SSL*>(p0);
  int32_t v1 = p1;
  uint64_t v2 = p2;
  void* v3 = reinterpret_cast<void*>(p3);
  uint64_t r = SSL_ctrl(v0, v1, v2, v3);
  ((uint64_t*)p_ret->data)[0] = r;

}
void RSA_pkey_ctx_ctrlSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  void* v4 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[4])->Value());
  int32_t rc = RSA_pkey_ctx_ctrl(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t RSA_pkey_ctx_ctrlFast(void* p, void* p0, int32_t p1, int32_t p2, int32_t p3, void* p4) {
  EVP_PKEY_CTX* v0 = reinterpret_cast<EVP_PKEY_CTX*>(p0);
  int32_t v1 = p1;
  int32_t v2 = p2;
  int32_t v3 = p3;
  void* v4 = reinterpret_cast<void*>(p4);
  return RSA_pkey_ctx_ctrl(v0, v1, v2, v3, v4);
}
void EVP_sha512_224Slow(const FunctionCallbackInfo<Value> &args) {

  const EVP_MD* rc = EVP_sha512_224();
  Local<ArrayBuffer> ab = args[0].As<Uint32Array>()->Buffer();
  ((const EVP_MD**)ab->Data())[0] = rc;
}

void EVP_sha512_224Fast(void* p, struct FastApiTypedArray* const p_ret) {

  const EVP_MD* r = EVP_sha512_224();
  ((const EVP_MD**)p_ret->data)[0] = r;

}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  v8::CTypeInfo* cargsOpenSSL_version = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsOpenSSL_version[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsOpenSSL_version[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsOpenSSL_version[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcOpenSSL_version = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoOpenSSL_version = new v8::CFunctionInfo(*rcOpenSSL_version, 3, cargsOpenSSL_version);
  v8::CFunction* pFOpenSSL_version = new v8::CFunction((const void*)&OpenSSL_versionFast, infoOpenSSL_version);
  SET_FAST_METHOD(isolate, module, "OpenSSL_version", pFOpenSSL_version, OpenSSL_versionSlow);
  v8::CTypeInfo* cargsEVP_PKEY_CTX_new_id = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_CTX_new_id[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_CTX_new_id[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsEVP_PKEY_CTX_new_id[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_PKEY_CTX_new_id[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_PKEY_CTX_new_id = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_PKEY_CTX_new_id = new v8::CFunctionInfo(*rcEVP_PKEY_CTX_new_id, 4, cargsEVP_PKEY_CTX_new_id);
  v8::CFunction* pFEVP_PKEY_CTX_new_id = new v8::CFunction((const void*)&EVP_PKEY_CTX_new_idFast, infoEVP_PKEY_CTX_new_id);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_CTX_new_id", pFEVP_PKEY_CTX_new_id, EVP_PKEY_CTX_new_idSlow);

  v8::CTypeInfo* cargsEVP_PKEY_keygen_init = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_keygen_init[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_keygen_init[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_keygen_init = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_PKEY_keygen_init = new v8::CFunctionInfo(*rcEVP_PKEY_keygen_init, 2, cargsEVP_PKEY_keygen_init);
  v8::CFunction* pFEVP_PKEY_keygen_init = new v8::CFunction((const void*)&EVP_PKEY_keygen_initFast, infoEVP_PKEY_keygen_init);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_keygen_init", pFEVP_PKEY_keygen_init, EVP_PKEY_keygen_initSlow);

  v8::CTypeInfo* cargsEVP_PKEY_keygen = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_keygen[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_keygen[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_PKEY_keygen[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_keygen = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_PKEY_keygen = new v8::CFunctionInfo(*rcEVP_PKEY_keygen, 3, cargsEVP_PKEY_keygen);
  v8::CFunction* pFEVP_PKEY_keygen = new v8::CFunction((const void*)&EVP_PKEY_keygenFast, infoEVP_PKEY_keygen);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_keygen", pFEVP_PKEY_keygen, EVP_PKEY_keygenSlow);
  v8::CTypeInfo* cargsEVP_PKEY_new = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_PKEY_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_PKEY_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_PKEY_new = new v8::CFunctionInfo(*rcEVP_PKEY_new, 2, cargsEVP_PKEY_new);
  v8::CFunction* pFEVP_PKEY_new = new v8::CFunction((const void*)&EVP_PKEY_newFast, infoEVP_PKEY_new);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_new", pFEVP_PKEY_new, EVP_PKEY_newSlow);

  v8::CTypeInfo* cargsEVP_PKEY_assign = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_assign[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_assign[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_PKEY_assign[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsEVP_PKEY_assign[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_assign = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_PKEY_assign = new v8::CFunctionInfo(*rcEVP_PKEY_assign, 4, cargsEVP_PKEY_assign);
  v8::CFunction* pFEVP_PKEY_assign = new v8::CFunction((const void*)&EVP_PKEY_assignFast, infoEVP_PKEY_assign);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_assign", pFEVP_PKEY_assign, EVP_PKEY_assignSlow);

  v8::CTypeInfo* cargsEVP_PKEY_id = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_id[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_id[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_id = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_PKEY_id = new v8::CFunctionInfo(*rcEVP_PKEY_id, 2, cargsEVP_PKEY_id);
  v8::CFunction* pFEVP_PKEY_id = new v8::CFunction((const void*)&EVP_PKEY_idFast, infoEVP_PKEY_id);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_id", pFEVP_PKEY_id, EVP_PKEY_idSlow);

  v8::CTypeInfo* cargsEVP_PKEY_type = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_type[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_type[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcEVP_PKEY_type = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_PKEY_type = new v8::CFunctionInfo(*rcEVP_PKEY_type, 2, cargsEVP_PKEY_type);
  v8::CFunction* pFEVP_PKEY_type = new v8::CFunction((const void*)&EVP_PKEY_typeFast, infoEVP_PKEY_type);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_type", pFEVP_PKEY_type, EVP_PKEY_typeSlow);
  v8::CTypeInfo* cargsEVP_PKEY_get1_RSA = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_get1_RSA[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_get1_RSA[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_PKEY_get1_RSA[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_PKEY_get1_RSA = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_PKEY_get1_RSA = new v8::CFunctionInfo(*rcEVP_PKEY_get1_RSA, 3, cargsEVP_PKEY_get1_RSA);
  v8::CFunction* pFEVP_PKEY_get1_RSA = new v8::CFunction((const void*)&EVP_PKEY_get1_RSAFast, infoEVP_PKEY_get1_RSA);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_get1_RSA", pFEVP_PKEY_get1_RSA, EVP_PKEY_get1_RSASlow);

  v8::CTypeInfo* cargsEVP_PKEY_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_PKEY_free = new v8::CFunctionInfo(*rcEVP_PKEY_free, 2, cargsEVP_PKEY_free);
  v8::CFunction* pFEVP_PKEY_free = new v8::CFunction((const void*)&EVP_PKEY_freeFast, infoEVP_PKEY_free);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_free", pFEVP_PKEY_free, EVP_PKEY_freeSlow);

  v8::CTypeInfo* cargsEVP_PKEY_CTX_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_PKEY_CTX_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_PKEY_CTX_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_PKEY_CTX_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_PKEY_CTX_free = new v8::CFunctionInfo(*rcEVP_PKEY_CTX_free, 2, cargsEVP_PKEY_CTX_free);
  v8::CFunction* pFEVP_PKEY_CTX_free = new v8::CFunction((const void*)&EVP_PKEY_CTX_freeFast, infoEVP_PKEY_CTX_free);
  SET_FAST_METHOD(isolate, module, "EVP_PKEY_CTX_free", pFEVP_PKEY_CTX_free, EVP_PKEY_CTX_freeSlow);
  v8::CTypeInfo* cargsEVP_MD_CTX_new = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_MD_CTX_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_MD_CTX_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_MD_CTX_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_MD_CTX_new = new v8::CFunctionInfo(*rcEVP_MD_CTX_new, 2, cargsEVP_MD_CTX_new);
  v8::CFunction* pFEVP_MD_CTX_new = new v8::CFunction((const void*)&EVP_MD_CTX_newFast, infoEVP_MD_CTX_new);
  SET_FAST_METHOD(isolate, module, "EVP_MD_CTX_new", pFEVP_MD_CTX_new, EVP_MD_CTX_newSlow);

  v8::CTypeInfo* cargsEVP_MD_CTX_reset = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_MD_CTX_reset[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_MD_CTX_reset[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_MD_CTX_reset = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_MD_CTX_reset = new v8::CFunctionInfo(*rcEVP_MD_CTX_reset, 2, cargsEVP_MD_CTX_reset);
  v8::CFunction* pFEVP_MD_CTX_reset = new v8::CFunction((const void*)&EVP_MD_CTX_resetFast, infoEVP_MD_CTX_reset);
  SET_FAST_METHOD(isolate, module, "EVP_MD_CTX_reset", pFEVP_MD_CTX_reset, EVP_MD_CTX_resetSlow);

  v8::CTypeInfo* cargsEVP_MD_CTX_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_MD_CTX_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_MD_CTX_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_MD_CTX_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_MD_CTX_free = new v8::CFunctionInfo(*rcEVP_MD_CTX_free, 2, cargsEVP_MD_CTX_free);
  v8::CFunction* pFEVP_MD_CTX_free = new v8::CFunction((const void*)&EVP_MD_CTX_freeFast, infoEVP_MD_CTX_free);
  SET_FAST_METHOD(isolate, module, "EVP_MD_CTX_free", pFEVP_MD_CTX_free, EVP_MD_CTX_freeSlow);
  v8::CTypeInfo* cargsEVP_get_digestbynid = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsEVP_get_digestbynid[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_get_digestbynid[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsEVP_get_digestbynid[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_get_digestbynid = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_get_digestbynid = new v8::CFunctionInfo(*rcEVP_get_digestbynid, 3, cargsEVP_get_digestbynid);
  v8::CFunction* pFEVP_get_digestbynid = new v8::CFunction((const void*)&EVP_get_digestbynidFast, infoEVP_get_digestbynid);
  SET_FAST_METHOD(isolate, module, "EVP_get_digestbynid", pFEVP_get_digestbynid, EVP_get_digestbynidSlow);
  v8::CTypeInfo* cargsEVP_get_digestbyname = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsEVP_get_digestbyname[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_get_digestbyname[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsEVP_get_digestbyname[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_get_digestbyname = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_get_digestbyname = new v8::CFunctionInfo(*rcEVP_get_digestbyname, 3, cargsEVP_get_digestbyname);
  v8::CFunction* pFEVP_get_digestbyname = new v8::CFunction((const void*)&EVP_get_digestbynameFast, infoEVP_get_digestbyname);
  SET_FAST_METHOD(isolate, module, "EVP_get_digestbyname", pFEVP_get_digestbyname, EVP_get_digestbynameSlow);

  v8::CTypeInfo* cargsEVP_Digest = (v8::CTypeInfo*)calloc(7, sizeof(v8::CTypeInfo));
  cargsEVP_Digest[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_Digest[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsEVP_Digest[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsEVP_Digest[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsEVP_Digest[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsEVP_Digest[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_Digest[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_Digest = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_Digest = new v8::CFunctionInfo(*rcEVP_Digest, 7, cargsEVP_Digest);
  v8::CFunction* pFEVP_Digest = new v8::CFunction((const void*)&EVP_DigestFast, infoEVP_Digest);
  SET_FAST_METHOD(isolate, module, "EVP_Digest", pFEVP_Digest, EVP_DigestSlow);

  v8::CTypeInfo* cargsEVP_DigestInit_ex = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestInit_ex[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestInit_ex[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestInit_ex[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestInit_ex[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_DigestInit_ex = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestInit_ex = new v8::CFunctionInfo(*rcEVP_DigestInit_ex, 4, cargsEVP_DigestInit_ex);
  v8::CFunction* pFEVP_DigestInit_ex = new v8::CFunction((const void*)&EVP_DigestInit_exFast, infoEVP_DigestInit_ex);
  SET_FAST_METHOD(isolate, module, "EVP_DigestInit_ex", pFEVP_DigestInit_ex, EVP_DigestInit_exSlow);

  v8::CTypeInfo* cargsEVP_DigestUpdateBuffer = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestUpdateBuffer[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestUpdateBuffer[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestUpdateBuffer[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsEVP_DigestUpdateBuffer[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcEVP_DigestUpdateBuffer = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestUpdateBuffer = new v8::CFunctionInfo(*rcEVP_DigestUpdateBuffer, 4, cargsEVP_DigestUpdateBuffer);
  v8::CFunction* pFEVP_DigestUpdateBuffer = new v8::CFunction((const void*)&EVP_DigestUpdateBufferFast, infoEVP_DigestUpdateBuffer);
  SET_FAST_METHOD(isolate, module, "EVP_DigestUpdateBuffer", pFEVP_DigestUpdateBuffer, EVP_DigestUpdateBufferSlow);

  v8::CTypeInfo* cargsEVP_DigestUpdateString = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestUpdateString[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestUpdateString[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestUpdateString[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsEVP_DigestUpdateString[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcEVP_DigestUpdateString = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestUpdateString = new v8::CFunctionInfo(*rcEVP_DigestUpdateString, 4, cargsEVP_DigestUpdateString);
  v8::CFunction* pFEVP_DigestUpdateString = new v8::CFunction((const void*)&EVP_DigestUpdateStringFast, infoEVP_DigestUpdateString);
  SET_FAST_METHOD(isolate, module, "EVP_DigestUpdateString", pFEVP_DigestUpdateString, EVP_DigestUpdateStringSlow);

  v8::CTypeInfo* cargsEVP_DigestVerifyFinal = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestVerifyFinal[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestVerifyFinal[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyFinal[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyFinal[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcEVP_DigestVerifyFinal = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestVerifyFinal = new v8::CFunctionInfo(*rcEVP_DigestVerifyFinal, 4, cargsEVP_DigestVerifyFinal);
  v8::CFunction* pFEVP_DigestVerifyFinal = new v8::CFunction((const void*)&EVP_DigestVerifyFinalFast, infoEVP_DigestVerifyFinal);
  SET_FAST_METHOD(isolate, module, "EVP_DigestVerifyFinal", pFEVP_DigestVerifyFinal, EVP_DigestVerifyFinalSlow);

  v8::CTypeInfo* cargsEVP_DigestSignFinal = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestSignFinal[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestSignFinal[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignFinal[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignFinal[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_DigestSignFinal = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestSignFinal = new v8::CFunctionInfo(*rcEVP_DigestSignFinal, 4, cargsEVP_DigestSignFinal);
  v8::CFunction* pFEVP_DigestSignFinal = new v8::CFunction((const void*)&EVP_DigestSignFinalFast, infoEVP_DigestSignFinal);
  SET_FAST_METHOD(isolate, module, "EVP_DigestSignFinal", pFEVP_DigestSignFinal, EVP_DigestSignFinalSlow);

  v8::CTypeInfo* cargsEVP_DigestFinal = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsEVP_DigestFinal[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestFinal[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestFinal[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsEVP_DigestFinal[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_DigestFinal = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestFinal = new v8::CFunctionInfo(*rcEVP_DigestFinal, 4, cargsEVP_DigestFinal);
  v8::CFunction* pFEVP_DigestFinal = new v8::CFunction((const void*)&EVP_DigestFinalFast, infoEVP_DigestFinal);
  SET_FAST_METHOD(isolate, module, "EVP_DigestFinal", pFEVP_DigestFinal, EVP_DigestFinalSlow);
  v8::CTypeInfo* cargsEVP_sha1 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha1[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha1[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha1 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha1 = new v8::CFunctionInfo(*rcEVP_sha1, 2, cargsEVP_sha1);
  v8::CFunction* pFEVP_sha1 = new v8::CFunction((const void*)&EVP_sha1Fast, infoEVP_sha1);
  SET_FAST_METHOD(isolate, module, "EVP_sha1", pFEVP_sha1, EVP_sha1Slow);
  v8::CTypeInfo* cargsEVP_sha224 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha224[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha224[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha224 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha224 = new v8::CFunctionInfo(*rcEVP_sha224, 2, cargsEVP_sha224);
  v8::CFunction* pFEVP_sha224 = new v8::CFunction((const void*)&EVP_sha224Fast, infoEVP_sha224);
  SET_FAST_METHOD(isolate, module, "EVP_sha224", pFEVP_sha224, EVP_sha224Slow);
  v8::CTypeInfo* cargsEVP_sha256 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha256[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha256[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha256 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha256 = new v8::CFunctionInfo(*rcEVP_sha256, 2, cargsEVP_sha256);
  v8::CFunction* pFEVP_sha256 = new v8::CFunction((const void*)&EVP_sha256Fast, infoEVP_sha256);
  SET_FAST_METHOD(isolate, module, "EVP_sha256", pFEVP_sha256, EVP_sha256Slow);
  v8::CTypeInfo* cargsEVP_sha384 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha384[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha384[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha384 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha384 = new v8::CFunctionInfo(*rcEVP_sha384, 2, cargsEVP_sha384);
  v8::CFunction* pFEVP_sha384 = new v8::CFunction((const void*)&EVP_sha384Fast, infoEVP_sha384);
  SET_FAST_METHOD(isolate, module, "EVP_sha384", pFEVP_sha384, EVP_sha384Slow);
  v8::CTypeInfo* cargsEVP_sha512 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha512[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha512[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha512 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha512 = new v8::CFunctionInfo(*rcEVP_sha512, 2, cargsEVP_sha512);
  v8::CFunction* pFEVP_sha512 = new v8::CFunction((const void*)&EVP_sha512Fast, infoEVP_sha512);
  SET_FAST_METHOD(isolate, module, "EVP_sha512", pFEVP_sha512, EVP_sha512Slow);
  v8::CTypeInfo* cargsEVP_sha512_256 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha512_256[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha512_256[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha512_256 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha512_256 = new v8::CFunctionInfo(*rcEVP_sha512_256, 2, cargsEVP_sha512_256);
  v8::CFunction* pFEVP_sha512_256 = new v8::CFunction((const void*)&EVP_sha512_256Fast, infoEVP_sha512_256);
  SET_FAST_METHOD(isolate, module, "EVP_sha512_256", pFEVP_sha512_256, EVP_sha512_256Slow);

  v8::CTypeInfo* cargsEVP_DigestVerifyInit = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsEVP_DigestVerifyInit[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestVerifyInit[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyInit[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyInit[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyInit[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestVerifyInit[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_DigestVerifyInit = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestVerifyInit = new v8::CFunctionInfo(*rcEVP_DigestVerifyInit, 6, cargsEVP_DigestVerifyInit);
  v8::CFunction* pFEVP_DigestVerifyInit = new v8::CFunction((const void*)&EVP_DigestVerifyInitFast, infoEVP_DigestVerifyInit);
  SET_FAST_METHOD(isolate, module, "EVP_DigestVerifyInit", pFEVP_DigestVerifyInit, EVP_DigestVerifyInitSlow);

  v8::CTypeInfo* cargsEVP_DigestSignInit = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsEVP_DigestSignInit[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsEVP_DigestSignInit[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignInit[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignInit[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignInit[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsEVP_DigestSignInit[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcEVP_DigestSignInit = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoEVP_DigestSignInit = new v8::CFunctionInfo(*rcEVP_DigestSignInit, 6, cargsEVP_DigestSignInit);
  v8::CFunction* pFEVP_DigestSignInit = new v8::CFunction((const void*)&EVP_DigestSignInitFast, infoEVP_DigestSignInit);
  SET_FAST_METHOD(isolate, module, "EVP_DigestSignInit", pFEVP_DigestSignInit, EVP_DigestSignInitSlow);
  v8::CTypeInfo* cargsBIO_s_mem = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsBIO_s_mem[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsBIO_s_mem[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcBIO_s_mem = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoBIO_s_mem = new v8::CFunctionInfo(*rcBIO_s_mem, 2, cargsBIO_s_mem);
  v8::CFunction* pFBIO_s_mem = new v8::CFunction((const void*)&BIO_s_memFast, infoBIO_s_mem);
  SET_FAST_METHOD(isolate, module, "BIO_s_mem", pFBIO_s_mem, BIO_s_memSlow);
  v8::CTypeInfo* cargsBIO_new = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsBIO_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsBIO_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_new[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcBIO_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoBIO_new = new v8::CFunctionInfo(*rcBIO_new, 3, cargsBIO_new);
  v8::CFunction* pFBIO_new = new v8::CFunction((const void*)&BIO_newFast, infoBIO_new);
  SET_FAST_METHOD(isolate, module, "BIO_new", pFBIO_new, BIO_newSlow);
  v8::CTypeInfo* cargsBIO_new_mem_buf = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsBIO_new_mem_buf[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsBIO_new_mem_buf[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_new_mem_buf[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsBIO_new_mem_buf[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcBIO_new_mem_buf = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoBIO_new_mem_buf = new v8::CFunctionInfo(*rcBIO_new_mem_buf, 4, cargsBIO_new_mem_buf);
  v8::CFunction* pFBIO_new_mem_buf = new v8::CFunction((const void*)&BIO_new_mem_bufFast, infoBIO_new_mem_buf);
  SET_FAST_METHOD(isolate, module, "BIO_new_mem_buf", pFBIO_new_mem_buf, BIO_new_mem_bufSlow);

  v8::CTypeInfo* cargsBIO_ctrl = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsBIO_ctrl[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsBIO_ctrl[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_ctrl[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsBIO_ctrl[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_ctrl[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcBIO_ctrl = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoBIO_ctrl = new v8::CFunctionInfo(*rcBIO_ctrl, 5, cargsBIO_ctrl);
  v8::CFunction* pFBIO_ctrl = new v8::CFunction((const void*)&BIO_ctrlFast, infoBIO_ctrl);
  SET_FAST_METHOD(isolate, module, "BIO_ctrl", pFBIO_ctrl, BIO_ctrlSlow);

  v8::CTypeInfo* cargsBIO_read = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsBIO_read[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsBIO_read[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_read[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsBIO_read[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcBIO_read = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoBIO_read = new v8::CFunctionInfo(*rcBIO_read, 4, cargsBIO_read);
  v8::CFunction* pFBIO_read = new v8::CFunction((const void*)&BIO_readFast, infoBIO_read);
  SET_FAST_METHOD(isolate, module, "BIO_read", pFBIO_read, BIO_readSlow);

  v8::CTypeInfo* cargsPEM_write_bio_PrivateKey = (v8::CTypeInfo*)calloc(8, sizeof(v8::CTypeInfo));
  cargsPEM_write_bio_PrivateKey[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_write_bio_PrivateKey[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PrivateKey[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PrivateKey[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PrivateKey[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PrivateKey[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsPEM_write_bio_PrivateKey[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PrivateKey[7] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcPEM_write_bio_PrivateKey = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoPEM_write_bio_PrivateKey = new v8::CFunctionInfo(*rcPEM_write_bio_PrivateKey, 8, cargsPEM_write_bio_PrivateKey);
  v8::CFunction* pFPEM_write_bio_PrivateKey = new v8::CFunction((const void*)&PEM_write_bio_PrivateKeyFast, infoPEM_write_bio_PrivateKey);
  SET_FAST_METHOD(isolate, module, "PEM_write_bio_PrivateKey", pFPEM_write_bio_PrivateKey, PEM_write_bio_PrivateKeySlow);

  v8::CTypeInfo* cargsPEM_write_bio_PUBKEY = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsPEM_write_bio_PUBKEY[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_write_bio_PUBKEY[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_PUBKEY[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcPEM_write_bio_PUBKEY = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoPEM_write_bio_PUBKEY = new v8::CFunctionInfo(*rcPEM_write_bio_PUBKEY, 3, cargsPEM_write_bio_PUBKEY);
  v8::CFunction* pFPEM_write_bio_PUBKEY = new v8::CFunction((const void*)&PEM_write_bio_PUBKEYFast, infoPEM_write_bio_PUBKEY);
  SET_FAST_METHOD(isolate, module, "PEM_write_bio_PUBKEY", pFPEM_write_bio_PUBKEY, PEM_write_bio_PUBKEYSlow);

  v8::CTypeInfo* cargsPEM_write_bio_X509_REQ = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsPEM_write_bio_X509_REQ[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_write_bio_X509_REQ[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_write_bio_X509_REQ[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcPEM_write_bio_X509_REQ = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoPEM_write_bio_X509_REQ = new v8::CFunctionInfo(*rcPEM_write_bio_X509_REQ, 3, cargsPEM_write_bio_X509_REQ);
  v8::CFunction* pFPEM_write_bio_X509_REQ = new v8::CFunction((const void*)&PEM_write_bio_X509_REQFast, infoPEM_write_bio_X509_REQ);
  SET_FAST_METHOD(isolate, module, "PEM_write_bio_X509_REQ", pFPEM_write_bio_X509_REQ, PEM_write_bio_X509_REQSlow);
  v8::CTypeInfo* cargsPEM_read_bio_RSA_PUBKEY = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsPEM_read_bio_RSA_PUBKEY[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_read_bio_RSA_PUBKEY[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSA_PUBKEY[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSA_PUBKEY[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSA_PUBKEY[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSA_PUBKEY[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcPEM_read_bio_RSA_PUBKEY = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoPEM_read_bio_RSA_PUBKEY = new v8::CFunctionInfo(*rcPEM_read_bio_RSA_PUBKEY, 6, cargsPEM_read_bio_RSA_PUBKEY);
  v8::CFunction* pFPEM_read_bio_RSA_PUBKEY = new v8::CFunction((const void*)&PEM_read_bio_RSA_PUBKEYFast, infoPEM_read_bio_RSA_PUBKEY);
  SET_FAST_METHOD(isolate, module, "PEM_read_bio_RSA_PUBKEY", pFPEM_read_bio_RSA_PUBKEY, PEM_read_bio_RSA_PUBKEYSlow);
  v8::CTypeInfo* cargsPEM_read_bio_RSAPrivateKey = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsPEM_read_bio_RSAPrivateKey[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_read_bio_RSAPrivateKey[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSAPrivateKey[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSAPrivateKey[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSAPrivateKey[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_RSAPrivateKey[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcPEM_read_bio_RSAPrivateKey = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoPEM_read_bio_RSAPrivateKey = new v8::CFunctionInfo(*rcPEM_read_bio_RSAPrivateKey, 6, cargsPEM_read_bio_RSAPrivateKey);
  v8::CFunction* pFPEM_read_bio_RSAPrivateKey = new v8::CFunction((const void*)&PEM_read_bio_RSAPrivateKeyFast, infoPEM_read_bio_RSAPrivateKey);
  SET_FAST_METHOD(isolate, module, "PEM_read_bio_RSAPrivateKey", pFPEM_read_bio_RSAPrivateKey, PEM_read_bio_RSAPrivateKeySlow);
  v8::CTypeInfo* cargsPEM_read_bio_X509 = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsPEM_read_bio_X509[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsPEM_read_bio_X509[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_X509[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_X509[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_X509[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsPEM_read_bio_X509[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcPEM_read_bio_X509 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoPEM_read_bio_X509 = new v8::CFunctionInfo(*rcPEM_read_bio_X509, 6, cargsPEM_read_bio_X509);
  v8::CFunction* pFPEM_read_bio_X509 = new v8::CFunction((const void*)&PEM_read_bio_X509Fast, infoPEM_read_bio_X509);
  SET_FAST_METHOD(isolate, module, "PEM_read_bio_X509", pFPEM_read_bio_X509, PEM_read_bio_X509Slow);
  v8::CTypeInfo* cargsX509_get_subject_name = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_get_subject_name[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_get_subject_name[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_get_subject_name[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_get_subject_name = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_get_subject_name = new v8::CFunctionInfo(*rcX509_get_subject_name, 3, cargsX509_get_subject_name);
  v8::CFunction* pFX509_get_subject_name = new v8::CFunction((const void*)&X509_get_subject_nameFast, infoX509_get_subject_name);
  SET_FAST_METHOD(isolate, module, "X509_get_subject_name", pFX509_get_subject_name, X509_get_subject_nameSlow);
  v8::CTypeInfo* cargsX509_get_pubkey = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_get_pubkey[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_get_pubkey[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_get_pubkey[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_get_pubkey = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_get_pubkey = new v8::CFunctionInfo(*rcX509_get_pubkey, 3, cargsX509_get_pubkey);
  v8::CFunction* pFX509_get_pubkey = new v8::CFunction((const void*)&X509_get_pubkeyFast, infoX509_get_pubkey);
  SET_FAST_METHOD(isolate, module, "X509_get_pubkey", pFX509_get_pubkey, X509_get_pubkeySlow);
  v8::CTypeInfo* cargsX509_NAME_oneline = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsX509_NAME_oneline[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_NAME_oneline[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_NAME_oneline[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_NAME_oneline[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsX509_NAME_oneline[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_NAME_oneline = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_NAME_oneline = new v8::CFunctionInfo(*rcX509_NAME_oneline, 5, cargsX509_NAME_oneline);
  v8::CFunction* pFX509_NAME_oneline = new v8::CFunction((const void*)&X509_NAME_onelineFast, infoX509_NAME_oneline);
  SET_FAST_METHOD(isolate, module, "X509_NAME_oneline", pFX509_NAME_oneline, X509_NAME_onelineSlow);
  v8::CTypeInfo* cargsX509_get_issuer_name = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_get_issuer_name[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_get_issuer_name[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_get_issuer_name[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_get_issuer_name = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_get_issuer_name = new v8::CFunctionInfo(*rcX509_get_issuer_name, 3, cargsX509_get_issuer_name);
  v8::CFunction* pFX509_get_issuer_name = new v8::CFunction((const void*)&X509_get_issuer_nameFast, infoX509_get_issuer_name);
  SET_FAST_METHOD(isolate, module, "X509_get_issuer_name", pFX509_get_issuer_name, X509_get_issuer_nameSlow);

  v8::CTypeInfo* cargsX509_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsX509_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcX509_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_free = new v8::CFunctionInfo(*rcX509_free, 2, cargsX509_free);
  v8::CFunction* pFX509_free = new v8::CFunction((const void*)&X509_freeFast, infoX509_free);
  SET_FAST_METHOD(isolate, module, "X509_free", pFX509_free, X509_freeSlow);
  v8::CTypeInfo* cargsX509_REQ_new = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsX509_REQ_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsX509_REQ_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_REQ_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_REQ_new = new v8::CFunctionInfo(*rcX509_REQ_new, 2, cargsX509_REQ_new);
  v8::CFunction* pFX509_REQ_new = new v8::CFunction((const void*)&X509_REQ_newFast, infoX509_REQ_new);
  SET_FAST_METHOD(isolate, module, "X509_REQ_new", pFX509_REQ_new, X509_REQ_newSlow);

  v8::CTypeInfo* cargsX509_REQ_set_version = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_REQ_set_version[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_REQ_set_version[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_REQ_set_version[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcX509_REQ_set_version = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoX509_REQ_set_version = new v8::CFunctionInfo(*rcX509_REQ_set_version, 3, cargsX509_REQ_set_version);
  v8::CFunction* pFX509_REQ_set_version = new v8::CFunction((const void*)&X509_REQ_set_versionFast, infoX509_REQ_set_version);
  SET_FAST_METHOD(isolate, module, "X509_REQ_set_version", pFX509_REQ_set_version, X509_REQ_set_versionSlow);
  v8::CTypeInfo* cargsX509_REQ_get_subject_name = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_REQ_get_subject_name[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_REQ_get_subject_name[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_REQ_get_subject_name[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcX509_REQ_get_subject_name = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoX509_REQ_get_subject_name = new v8::CFunctionInfo(*rcX509_REQ_get_subject_name, 3, cargsX509_REQ_get_subject_name);
  v8::CFunction* pFX509_REQ_get_subject_name = new v8::CFunction((const void*)&X509_REQ_get_subject_nameFast, infoX509_REQ_get_subject_name);
  SET_FAST_METHOD(isolate, module, "X509_REQ_get_subject_name", pFX509_REQ_get_subject_name, X509_REQ_get_subject_nameSlow);

  v8::CTypeInfo* cargsX509_NAME_add_entry_by_txt = (v8::CTypeInfo*)calloc(8, sizeof(v8::CTypeInfo));
  cargsX509_NAME_add_entry_by_txt[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_NAME_add_entry_by_txt[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_NAME_add_entry_by_txt[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_NAME_add_entry_by_txt[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsX509_NAME_add_entry_by_txt[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_NAME_add_entry_by_txt[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsX509_NAME_add_entry_by_txt[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsX509_NAME_add_entry_by_txt[7] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcX509_NAME_add_entry_by_txt = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoX509_NAME_add_entry_by_txt = new v8::CFunctionInfo(*rcX509_NAME_add_entry_by_txt, 8, cargsX509_NAME_add_entry_by_txt);
  v8::CFunction* pFX509_NAME_add_entry_by_txt = new v8::CFunction((const void*)&X509_NAME_add_entry_by_txtFast, infoX509_NAME_add_entry_by_txt);
  SET_FAST_METHOD(isolate, module, "X509_NAME_add_entry_by_txt", pFX509_NAME_add_entry_by_txt, X509_NAME_add_entry_by_txtSlow);

  v8::CTypeInfo* cargsX509_REQ_set_pubkey = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsX509_REQ_set_pubkey[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_REQ_set_pubkey[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_REQ_set_pubkey[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcX509_REQ_set_pubkey = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoX509_REQ_set_pubkey = new v8::CFunctionInfo(*rcX509_REQ_set_pubkey, 3, cargsX509_REQ_set_pubkey);
  v8::CFunction* pFX509_REQ_set_pubkey = new v8::CFunction((const void*)&X509_REQ_set_pubkeyFast, infoX509_REQ_set_pubkey);
  SET_FAST_METHOD(isolate, module, "X509_REQ_set_pubkey", pFX509_REQ_set_pubkey, X509_REQ_set_pubkeySlow);

  v8::CTypeInfo* cargsX509_REQ_sign = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsX509_REQ_sign[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsX509_REQ_sign[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_REQ_sign[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsX509_REQ_sign[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcX509_REQ_sign = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoX509_REQ_sign = new v8::CFunctionInfo(*rcX509_REQ_sign, 4, cargsX509_REQ_sign);
  v8::CFunction* pFX509_REQ_sign = new v8::CFunction((const void*)&X509_REQ_signFast, infoX509_REQ_sign);
  SET_FAST_METHOD(isolate, module, "X509_REQ_sign", pFX509_REQ_sign, X509_REQ_signSlow);

  v8::CTypeInfo* cargsOBJ_txt2nid = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsOBJ_txt2nid[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsOBJ_txt2nid[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcOBJ_txt2nid = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoOBJ_txt2nid = new v8::CFunctionInfo(*rcOBJ_txt2nid, 2, cargsOBJ_txt2nid);
  v8::CFunction* pFOBJ_txt2nid = new v8::CFunction((const void*)&OBJ_txt2nidFast, infoOBJ_txt2nid);
  SET_FAST_METHOD(isolate, module, "OBJ_txt2nid", pFOBJ_txt2nid, OBJ_txt2nidSlow);

  v8::CTypeInfo* cargsSSL_get_error = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_get_error[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_error[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_get_error[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_get_error = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_get_error = new v8::CFunctionInfo(*rcSSL_get_error, 3, cargsSSL_get_error);
  v8::CFunction* pFSSL_get_error = new v8::CFunction((const void*)&SSL_get_errorFast, infoSSL_get_error);
  SET_FAST_METHOD(isolate, module, "SSL_get_error", pFSSL_get_error, SSL_get_errorSlow);

  v8::CTypeInfo* cargsSSL_shutdown = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_shutdown[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_shutdown[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_shutdown = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_shutdown = new v8::CFunctionInfo(*rcSSL_shutdown, 2, cargsSSL_shutdown);
  v8::CFunction* pFSSL_shutdown = new v8::CFunction((const void*)&SSL_shutdownFast, infoSSL_shutdown);
  SET_FAST_METHOD(isolate, module, "SSL_shutdown", pFSSL_shutdown, SSL_shutdownSlow);
  v8::CTypeInfo* cargsSSL_get_servername = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_get_servername[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_servername[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_get_servername[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsSSL_get_servername[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_get_servername = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_get_servername = new v8::CFunctionInfo(*rcSSL_get_servername, 4, cargsSSL_get_servername);
  v8::CFunction* pFSSL_get_servername = new v8::CFunction((const void*)&SSL_get_servernameFast, infoSSL_get_servername);
  SET_FAST_METHOD(isolate, module, "SSL_get_servername", pFSSL_get_servername, SSL_get_servernameSlow);

  v8::CTypeInfo* cargsSSL_get_servername_type = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_get_servername_type[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_servername_type[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_get_servername_type = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_get_servername_type = new v8::CFunctionInfo(*rcSSL_get_servername_type, 2, cargsSSL_get_servername_type);
  v8::CFunction* pFSSL_get_servername_type = new v8::CFunction((const void*)&SSL_get_servername_typeFast, infoSSL_get_servername_type);
  SET_FAST_METHOD(isolate, module, "SSL_get_servername_type", pFSSL_get_servername_type, SSL_get_servername_typeSlow);

  v8::CTypeInfo* cargsSSL_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_free = new v8::CFunctionInfo(*rcSSL_free, 2, cargsSSL_free);
  v8::CFunction* pFSSL_free = new v8::CFunction((const void*)&SSL_freeFast, infoSSL_free);
  SET_FAST_METHOD(isolate, module, "SSL_free", pFSSL_free, SSL_freeSlow);

  v8::CTypeInfo* cargsSSL_read = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_read[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_read[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_read[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_read[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_read = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_read = new v8::CFunctionInfo(*rcSSL_read, 4, cargsSSL_read);
  v8::CFunction* pFSSL_read = new v8::CFunction((const void*)&SSL_readFast, infoSSL_read);
  SET_FAST_METHOD(isolate, module, "SSL_read", pFSSL_read, SSL_readSlow);

  v8::CTypeInfo* cargsSSL_write = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_write[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_write[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_write[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_write[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_write = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_write = new v8::CFunctionInfo(*rcSSL_write, 4, cargsSSL_write);
  v8::CFunction* pFSSL_write = new v8::CFunction((const void*)&SSL_writeFast, infoSSL_write);
  SET_FAST_METHOD(isolate, module, "SSL_write", pFSSL_write, SSL_writeSlow);
  v8::CTypeInfo* cargsSSL_get_version = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_get_version[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_version[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_get_version[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_get_version = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_get_version = new v8::CFunctionInfo(*rcSSL_get_version, 3, cargsSSL_get_version);
  v8::CFunction* pFSSL_get_version = new v8::CFunction((const void*)&SSL_get_versionFast, infoSSL_get_version);
  SET_FAST_METHOD(isolate, module, "SSL_get_version", pFSSL_get_version, SSL_get_versionSlow);
  v8::CTypeInfo* cargsSSL_CIPHER_get_name = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_CIPHER_get_name[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CIPHER_get_name[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CIPHER_get_name[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_CIPHER_get_name = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_CIPHER_get_name = new v8::CFunctionInfo(*rcSSL_CIPHER_get_name, 3, cargsSSL_CIPHER_get_name);
  v8::CFunction* pFSSL_CIPHER_get_name = new v8::CFunction((const void*)&SSL_CIPHER_get_nameFast, infoSSL_CIPHER_get_name);
  SET_FAST_METHOD(isolate, module, "SSL_CIPHER_get_name", pFSSL_CIPHER_get_name, SSL_CIPHER_get_nameSlow);
  v8::CTypeInfo* cargsSSL_get_current_cipher = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_get_current_cipher[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_current_cipher[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_get_current_cipher[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_get_current_cipher = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_get_current_cipher = new v8::CFunctionInfo(*rcSSL_get_current_cipher, 3, cargsSSL_get_current_cipher);
  v8::CFunction* pFSSL_get_current_cipher = new v8::CFunction((const void*)&SSL_get_current_cipherFast, infoSSL_get_current_cipher);
  SET_FAST_METHOD(isolate, module, "SSL_get_current_cipher", pFSSL_get_current_cipher, SSL_get_current_cipherSlow);
  v8::CTypeInfo* cargsSSL_get_peer_certificate = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_get_peer_certificate[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_get_peer_certificate[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_get_peer_certificate[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_get_peer_certificate = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_get_peer_certificate = new v8::CFunctionInfo(*rcSSL_get_peer_certificate, 3, cargsSSL_get_peer_certificate);
  v8::CFunction* pFSSL_get_peer_certificate = new v8::CFunction((const void*)&SSL_get_peer_certificateFast, infoSSL_get_peer_certificate);
  SET_FAST_METHOD(isolate, module, "SSL_get_peer_certificate", pFSSL_get_peer_certificate, SSL_get_peer_certificateSlow);

  v8::CTypeInfo* cargsSSL_do_handshake = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_do_handshake[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_do_handshake[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_do_handshake = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_do_handshake = new v8::CFunctionInfo(*rcSSL_do_handshake, 2, cargsSSL_do_handshake);
  v8::CFunction* pFSSL_do_handshake = new v8::CFunction((const void*)&SSL_do_handshakeFast, infoSSL_do_handshake);
  SET_FAST_METHOD(isolate, module, "SSL_do_handshake", pFSSL_do_handshake, SSL_do_handshakeSlow);
  v8::CTypeInfo* cargsSSL_set_SSL_CTX = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_set_SSL_CTX[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_set_SSL_CTX[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_set_SSL_CTX[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_set_SSL_CTX[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_set_SSL_CTX = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_set_SSL_CTX = new v8::CFunctionInfo(*rcSSL_set_SSL_CTX, 4, cargsSSL_set_SSL_CTX);
  v8::CFunction* pFSSL_set_SSL_CTX = new v8::CFunction((const void*)&SSL_set_SSL_CTXFast, infoSSL_set_SSL_CTX);
  SET_FAST_METHOD(isolate, module, "SSL_set_SSL_CTX", pFSSL_set_SSL_CTX, SSL_set_SSL_CTXSlow);
  v8::CTypeInfo* cargsSSL_new = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_new[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_new = new v8::CFunctionInfo(*rcSSL_new, 3, cargsSSL_new);
  v8::CFunction* pFSSL_new = new v8::CFunction((const void*)&SSL_newFast, infoSSL_new);
  SET_FAST_METHOD(isolate, module, "SSL_new", pFSSL_new, SSL_newSlow);

  v8::CTypeInfo* cargsSSL_set_fd = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_set_fd[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_set_fd[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_set_fd[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_set_fd = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_set_fd = new v8::CFunctionInfo(*rcSSL_set_fd, 3, cargsSSL_set_fd);
  v8::CFunction* pFSSL_set_fd = new v8::CFunction((const void*)&SSL_set_fdFast, infoSSL_set_fd);
  SET_FAST_METHOD(isolate, module, "SSL_set_fd", pFSSL_set_fd, SSL_set_fdSlow);

  v8::CTypeInfo* cargsSSL_set_accept_state = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_set_accept_state[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_set_accept_state[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_set_accept_state = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_set_accept_state = new v8::CFunctionInfo(*rcSSL_set_accept_state, 2, cargsSSL_set_accept_state);
  v8::CFunction* pFSSL_set_accept_state = new v8::CFunction((const void*)&SSL_set_accept_stateFast, infoSSL_set_accept_state);
  SET_FAST_METHOD(isolate, module, "SSL_set_accept_state", pFSSL_set_accept_state, SSL_set_accept_stateSlow);

  v8::CTypeInfo* cargsSSL_accept = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_accept[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_accept[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_accept = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_accept = new v8::CFunctionInfo(*rcSSL_accept, 2, cargsSSL_accept);
  v8::CFunction* pFSSL_accept = new v8::CFunction((const void*)&SSL_acceptFast, infoSSL_accept);
  SET_FAST_METHOD(isolate, module, "SSL_accept", pFSSL_accept, SSL_acceptSlow);

  v8::CTypeInfo* cargsSSL_set_connect_state = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_set_connect_state[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_set_connect_state[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_set_connect_state = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_set_connect_state = new v8::CFunctionInfo(*rcSSL_set_connect_state, 2, cargsSSL_set_connect_state);
  v8::CFunction* pFSSL_set_connect_state = new v8::CFunction((const void*)&SSL_set_connect_stateFast, infoSSL_set_connect_state);
  SET_FAST_METHOD(isolate, module, "SSL_set_connect_state", pFSSL_set_connect_state, SSL_set_connect_stateSlow);
  v8::CTypeInfo* cargsSSL_CTX_new = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_new[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_new[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_new[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_CTX_new = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_CTX_new = new v8::CFunctionInfo(*rcSSL_CTX_new, 3, cargsSSL_CTX_new);
  v8::CFunction* pFSSL_CTX_new = new v8::CFunction((const void*)&SSL_CTX_newFast, infoSSL_CTX_new);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_new", pFSSL_CTX_new, SSL_CTX_newSlow);

  v8::CTypeInfo* cargsSSL_CTX_use_certificate_file = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_use_certificate_file[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_use_certificate_file[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_use_certificate_file[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_use_certificate_file[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_CTX_use_certificate_file = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_CTX_use_certificate_file = new v8::CFunctionInfo(*rcSSL_CTX_use_certificate_file, 4, cargsSSL_CTX_use_certificate_file);
  v8::CFunction* pFSSL_CTX_use_certificate_file = new v8::CFunction((const void*)&SSL_CTX_use_certificate_fileFast, infoSSL_CTX_use_certificate_file);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_use_certificate_file", pFSSL_CTX_use_certificate_file, SSL_CTX_use_certificate_fileSlow);

  v8::CTypeInfo* cargsSSL_CTX_use_certificate_chain_file = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_use_certificate_chain_file[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_use_certificate_chain_file[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_use_certificate_chain_file[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_CTX_use_certificate_chain_file = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_CTX_use_certificate_chain_file = new v8::CFunctionInfo(*rcSSL_CTX_use_certificate_chain_file, 3, cargsSSL_CTX_use_certificate_chain_file);
  v8::CFunction* pFSSL_CTX_use_certificate_chain_file = new v8::CFunction((const void*)&SSL_CTX_use_certificate_chain_fileFast, infoSSL_CTX_use_certificate_chain_file);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_use_certificate_chain_file", pFSSL_CTX_use_certificate_chain_file, SSL_CTX_use_certificate_chain_fileSlow);

  v8::CTypeInfo* cargsSSL_CTX_use_PrivateKey_file = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_use_PrivateKey_file[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_use_PrivateKey_file[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_use_PrivateKey_file[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_use_PrivateKey_file[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcSSL_CTX_use_PrivateKey_file = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_CTX_use_PrivateKey_file = new v8::CFunctionInfo(*rcSSL_CTX_use_PrivateKey_file, 4, cargsSSL_CTX_use_PrivateKey_file);
  v8::CFunction* pFSSL_CTX_use_PrivateKey_file = new v8::CFunction((const void*)&SSL_CTX_use_PrivateKey_fileFast, infoSSL_CTX_use_PrivateKey_file);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_use_PrivateKey_file", pFSSL_CTX_use_PrivateKey_file, SSL_CTX_use_PrivateKey_fileSlow);
  v8::CTypeInfo* cargsSSL_CTX_set_options = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_set_options[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_set_options[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_set_options[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_set_options[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_CTX_set_options = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_CTX_set_options = new v8::CFunctionInfo(*rcSSL_CTX_set_options, 4, cargsSSL_CTX_set_options);
  v8::CFunction* pFSSL_CTX_set_options = new v8::CFunction((const void*)&SSL_CTX_set_optionsFast, infoSSL_CTX_set_options);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_set_options", pFSSL_CTX_set_options, SSL_CTX_set_optionsSlow);

  v8::CTypeInfo* cargsSSL_CTX_set_cipher_list = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_set_cipher_list[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_set_cipher_list[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_set_cipher_list[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_CTX_set_cipher_list = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_CTX_set_cipher_list = new v8::CFunctionInfo(*rcSSL_CTX_set_cipher_list, 3, cargsSSL_CTX_set_cipher_list);
  v8::CFunction* pFSSL_CTX_set_cipher_list = new v8::CFunction((const void*)&SSL_CTX_set_cipher_listFast, infoSSL_CTX_set_cipher_list);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_set_cipher_list", pFSSL_CTX_set_cipher_list, SSL_CTX_set_cipher_listSlow);

  v8::CTypeInfo* cargsSSL_set_cipher_list = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_set_cipher_list[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_set_cipher_list[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_set_cipher_list[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_set_cipher_list = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_set_cipher_list = new v8::CFunctionInfo(*rcSSL_set_cipher_list, 3, cargsSSL_set_cipher_list);
  v8::CFunction* pFSSL_set_cipher_list = new v8::CFunction((const void*)&SSL_set_cipher_listFast, infoSSL_set_cipher_list);
  SET_FAST_METHOD(isolate, module, "SSL_set_cipher_list", pFSSL_set_cipher_list, SSL_set_cipher_listSlow);

  v8::CTypeInfo* cargsSSL_CTX_free = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_free[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_free[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_CTX_free = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_CTX_free = new v8::CFunctionInfo(*rcSSL_CTX_free, 2, cargsSSL_CTX_free);
  v8::CFunction* pFSSL_CTX_free = new v8::CFunction((const void*)&SSL_CTX_freeFast, infoSSL_CTX_free);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_free", pFSSL_CTX_free, SSL_CTX_freeSlow);

  v8::CTypeInfo* cargsTLS_server_method = (v8::CTypeInfo*)calloc(1, sizeof(v8::CTypeInfo));
  cargsTLS_server_method[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  v8::CTypeInfo* rcTLS_server_method = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoTLS_server_method = new v8::CFunctionInfo(*rcTLS_server_method, 1, cargsTLS_server_method);
  v8::CFunction* pFTLS_server_method = new v8::CFunction((const void*)&TLS_server_methodFast, infoTLS_server_method);
  SET_FAST_METHOD(isolate, module, "TLS_server_method", pFTLS_server_method, TLS_server_methodSlow);

  v8::CTypeInfo* cargsTLS_client_method = (v8::CTypeInfo*)calloc(1, sizeof(v8::CTypeInfo));
  cargsTLS_client_method[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  v8::CTypeInfo* rcTLS_client_method = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoTLS_client_method = new v8::CFunctionInfo(*rcTLS_client_method, 1, cargsTLS_client_method);
  v8::CFunction* pFTLS_client_method = new v8::CFunction((const void*)&TLS_client_methodFast, infoTLS_client_method);
  SET_FAST_METHOD(isolate, module, "TLS_client_method", pFTLS_client_method, TLS_client_methodSlow);

  v8::CTypeInfo* cargsSSL_CTX_set_ciphersuites = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsSSL_CTX_set_ciphersuites[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_CTX_set_ciphersuites[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_CTX_set_ciphersuites[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcSSL_CTX_set_ciphersuites = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoSSL_CTX_set_ciphersuites = new v8::CFunctionInfo(*rcSSL_CTX_set_ciphersuites, 3, cargsSSL_CTX_set_ciphersuites);
  v8::CFunction* pFSSL_CTX_set_ciphersuites = new v8::CFunction((const void*)&SSL_CTX_set_ciphersuitesFast, infoSSL_CTX_set_ciphersuites);
  SET_FAST_METHOD(isolate, module, "SSL_CTX_set_ciphersuites", pFSSL_CTX_set_ciphersuites, SSL_CTX_set_ciphersuitesSlow);
  v8::CTypeInfo* cargsSSL_ctrl = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsSSL_ctrl[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsSSL_ctrl[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_ctrl[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsSSL_ctrl[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_ctrl[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsSSL_ctrl[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcSSL_ctrl = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoSSL_ctrl = new v8::CFunctionInfo(*rcSSL_ctrl, 6, cargsSSL_ctrl);
  v8::CFunction* pFSSL_ctrl = new v8::CFunction((const void*)&SSL_ctrlFast, infoSSL_ctrl);
  SET_FAST_METHOD(isolate, module, "SSL_ctrl", pFSSL_ctrl, SSL_ctrlSlow);

  v8::CTypeInfo* cargsRSA_pkey_ctx_ctrl = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsRSA_pkey_ctx_ctrl[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsRSA_pkey_ctx_ctrl[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsRSA_pkey_ctx_ctrl[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsRSA_pkey_ctx_ctrl[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsRSA_pkey_ctx_ctrl[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsRSA_pkey_ctx_ctrl[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  v8::CTypeInfo* rcRSA_pkey_ctx_ctrl = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoRSA_pkey_ctx_ctrl = new v8::CFunctionInfo(*rcRSA_pkey_ctx_ctrl, 6, cargsRSA_pkey_ctx_ctrl);
  v8::CFunction* pFRSA_pkey_ctx_ctrl = new v8::CFunction((const void*)&RSA_pkey_ctx_ctrlFast, infoRSA_pkey_ctx_ctrl);
  SET_FAST_METHOD(isolate, module, "RSA_pkey_ctx_ctrl", pFRSA_pkey_ctx_ctrl, RSA_pkey_ctx_ctrlSlow);
  v8::CTypeInfo* cargsEVP_sha512_224 = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsEVP_sha512_224[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);

  cargsEVP_sha512_224[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcEVP_sha512_224 = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoEVP_sha512_224 = new v8::CFunctionInfo(*rcEVP_sha512_224, 2, cargsEVP_sha512_224);
  v8::CFunction* pFEVP_sha512_224 = new v8::CFunction((const void*)&EVP_sha512_224Fast, infoEVP_sha512_224);
  SET_FAST_METHOD(isolate, module, "EVP_sha512_224", pFEVP_sha512_224, EVP_sha512_224Slow);

  SET_MODULE(isolate, target, "libssl", module);
}
} // namespace libssl
} // namespace spin

extern "C" {
  void* _register_libssl() {
    return (void*)spin::libssl::Init;
  }
}
