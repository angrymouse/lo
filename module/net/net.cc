
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/un.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <linux/if_packet.h>
#include <netinet/tcp.h>
#include <netinet/if_ether.h>
#include <sys/types.h>
#include <sys/sendfile.h>
#include <unistd.h>
#include <spin.h>

namespace spin {
namespace net {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void socketSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = socket(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t socketFast(void* p, int32_t p0, int32_t p1, int32_t p2) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  int32_t v2 = p2;
  return socket(v0, v1, v2);
}
void setsockoptSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  Local<Uint8Array> u83 = args[3].As<Uint8Array>();
  uint8_t* ptr3 = (uint8_t*)u83->Buffer()->Data() + u83->ByteOffset();
  void* v3 = reinterpret_cast<void*>(ptr3);
  int32_t v4 = Local<Integer>::Cast(args[4])->Value();
  int32_t rc = setsockopt(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t setsockoptFast(void* p, int32_t p0, int32_t p1, int32_t p2, struct FastApiTypedArray* const p3, int32_t p4) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  int32_t v2 = p2;
  void* v3 = reinterpret_cast<void*>(p3->data);
  int32_t v4 = p4;
  return setsockopt(v0, v1, v2, v3, v4);
}
void bindSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  const struct sockaddr* v1 = reinterpret_cast<const struct sockaddr*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = bind(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t bindFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2) {
  int32_t v0 = p0;
  const struct sockaddr* v1 = reinterpret_cast<const struct sockaddr*>(p1->data);
  int32_t v2 = p2;
  return bind(v0, v1, v2);
}
void connectSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  const sockaddr* v1 = reinterpret_cast<const sockaddr*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = connect(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t connectFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2) {
  int32_t v0 = p0;
  const sockaddr* v1 = reinterpret_cast<const sockaddr*>(p1->data);
  int32_t v2 = p2;
  return connect(v0, v1, v2);
}
void listenSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = listen(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t listenFast(void* p, int32_t p0, int32_t p1) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  return listen(v0, v1);
}
void closeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t rc = close(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t closeFast(void* p, int32_t p0) {
  int32_t v0 = p0;
  return close(v0);
}
void accept4Slow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  sockaddr* v1 = reinterpret_cast<sockaddr*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  socklen_t* v2 = reinterpret_cast<socklen_t*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = accept4(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t accept4Fast(void* p, int32_t p0, void* p1, void* p2, int32_t p3) {
  int32_t v0 = p0;
  sockaddr* v1 = reinterpret_cast<sockaddr*>(p1);
  socklen_t* v2 = reinterpret_cast<socklen_t*>(p2);
  int32_t v3 = p3;
  return accept4(v0, v1, v2, v3);
}
void sendSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  void* v1 = reinterpret_cast<void*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = send(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t sendFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2, uint32_t p3) {
  int32_t v0 = p0;
  void* v1 = reinterpret_cast<void*>(p1->data);
  int32_t v2 = p2;
  uint32_t v3 = p3;
  return send(v0, v1, v2, v3);
}
void recvSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  void* v1 = reinterpret_cast<void*>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = recv(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t recvFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, uint32_t p2, int32_t p3) {
  int32_t v0 = p0;
  void* v1 = reinterpret_cast<void*>(p1->data);
  uint32_t v2 = p2;
  int32_t v3 = p3;
  return recv(v0, v1, v2, v3);
}
void recvfromSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  void* v1 = reinterpret_cast<void*>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  Local<Uint8Array> u84 = args[4].As<Uint8Array>();
  uint8_t* ptr4 = (uint8_t*)u84->Buffer()->Data() + u84->ByteOffset();
  struct sockaddr* v4 = reinterpret_cast<struct sockaddr*>(ptr4);
  Local<Uint8Array> u85 = args[5].As<Uint8Array>();
  uint8_t* ptr5 = (uint8_t*)u85->Buffer()->Data() + u85->ByteOffset();
  socklen_t* v5 = reinterpret_cast<socklen_t*>(ptr5);
  int32_t rc = recvfrom(v0, v1, v2, v3, v4, v5);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t recvfromFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, uint32_t p2, int32_t p3, struct FastApiTypedArray* const p4, struct FastApiTypedArray* const p5) {
  int32_t v0 = p0;
  void* v1 = reinterpret_cast<void*>(p1->data);
  uint32_t v2 = p2;
  int32_t v3 = p3;
  struct sockaddr* v4 = reinterpret_cast<struct sockaddr*>(p4->data);
  socklen_t* v5 = reinterpret_cast<socklen_t*>(p5->data);
  return recvfrom(v0, v1, v2, v3, v4, v5);
}
void sendmsgSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  const msghdr* v1 = reinterpret_cast<const msghdr*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = sendmsg(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t sendmsgFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2) {
  int32_t v0 = p0;
  const msghdr* v1 = reinterpret_cast<const msghdr*>(p1->data);
  int32_t v2 = p2;
  return sendmsg(v0, v1, v2);
}
void sendmmsgSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  struct mmsghdr* v1 = reinterpret_cast<struct mmsghdr*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = sendmmsg(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t sendmmsgFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2, int32_t p3) {
  int32_t v0 = p0;
  struct mmsghdr* v1 = reinterpret_cast<struct mmsghdr*>(p1->data);
  int32_t v2 = p2;
  int32_t v3 = p3;
  return sendmmsg(v0, v1, v2, v3);
}
void recvmsgSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  msghdr* v1 = reinterpret_cast<msghdr*>(ptr1);
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = recvmsg(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t recvmsgFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, uint32_t p2) {
  int32_t v0 = p0;
  msghdr* v1 = reinterpret_cast<msghdr*>(p1->data);
  uint32_t v2 = p2;
  return recvmsg(v0, v1, v2);
}
void recvmmsgSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  struct mmsghdr* v1 = reinterpret_cast<struct mmsghdr*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  Local<Uint8Array> u84 = args[4].As<Uint8Array>();
  uint8_t* ptr4 = (uint8_t*)u84->Buffer()->Data() + u84->ByteOffset();
  struct timespec* v4 = reinterpret_cast<struct timespec*>(ptr4);
  int32_t rc = recvmmsg(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t recvmmsgFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2, int32_t p3, struct FastApiTypedArray* const p4) {
  int32_t v0 = p0;
  struct mmsghdr* v1 = reinterpret_cast<struct mmsghdr*>(p1->data);
  int32_t v2 = p2;
  int32_t v3 = p3;
  struct timespec* v4 = reinterpret_cast<struct timespec*>(p4->data);
  return recvmmsg(v0, v1, v2, v3, v4);
}
void readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  void* v1 = reinterpret_cast<void*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = read(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t readFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2) {
  int32_t v0 = p0;
  void* v1 = reinterpret_cast<void*>(p1->data);
  int32_t v2 = p2;
  return read(v0, v1, v2);
}
void write_stringSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  String::Utf8Value v1(isolate, args[1]);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = write(v0, *v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t write_stringFast(void* p, int32_t p0, struct FastOneByteString* const p1, int32_t p2) {
  int32_t v0 = p0;
  struct FastOneByteString* const v1 = p1;
  int32_t v2 = p2;
  return write(v0, v1->data, v2);
}
void writeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint8Array> u81 = args[1].As<Uint8Array>();
  uint8_t* ptr1 = (uint8_t*)u81->Buffer()->Data() + u81->ByteOffset();
  void* v1 = reinterpret_cast<void*>(ptr1);
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = write(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t writeFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, int32_t p2) {
  int32_t v0 = p0;
  void* v1 = reinterpret_cast<void*>(p1->data);
  int32_t v2 = p2;
  return write(v0, v1, v2);
}
void pipe2Slow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int* v0 = reinterpret_cast<int*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = pipe2(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t pipe2Fast(void* p, void* p0, int32_t p1) {
  int* v0 = reinterpret_cast<int*>(p0);
  int32_t v1 = p1;
  return pipe2(v0, v1);
}
void dup2Slow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = dup2(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t dup2Fast(void* p, int32_t p0, int32_t p1) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  return dup2(v0, v1);
}
void ioctlSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  Local<Uint8Array> u82 = args[2].As<Uint8Array>();
  uint8_t* ptr2 = (uint8_t*)u82->Buffer()->Data() + u82->ByteOffset();
  void* v2 = reinterpret_cast<void*>(ptr2);
  int32_t rc = ioctl(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ioctlFast(void* p, int32_t p0, int32_t p1, struct FastApiTypedArray* const p2) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  void* v2 = reinterpret_cast<void*>(p2->data);
  return ioctl(v0, v1, v2);
}
void ioctl2Slow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = ioctl(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ioctl2Fast(void* p, int32_t p0, int32_t p1, int32_t p2) {
  int32_t v0 = p0;
  int32_t v1 = p1;
  int32_t v2 = p2;
  return ioctl(v0, v1, v2);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);

  v8::CTypeInfo* cargssocket = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargssocket[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargssocket[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssocket[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssocket[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcsocket = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infosocket = new v8::CFunctionInfo(*rcsocket, 4, cargssocket);
  v8::CFunction* pFsocket = new v8::CFunction((const void*)&socketFast, infosocket);
  SET_FAST_METHOD(isolate, module, "socket", pFsocket, socketSlow);

  v8::CTypeInfo* cargssetsockopt = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargssetsockopt[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargssetsockopt[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssetsockopt[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssetsockopt[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssetsockopt[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargssetsockopt[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcsetsockopt = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infosetsockopt = new v8::CFunctionInfo(*rcsetsockopt, 6, cargssetsockopt);
  v8::CFunction* pFsetsockopt = new v8::CFunction((const void*)&setsockoptFast, infosetsockopt);
  SET_FAST_METHOD(isolate, module, "setsockopt", pFsetsockopt, setsockoptSlow);

  v8::CTypeInfo* cargsbind = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsbind[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsbind[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsbind[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsbind[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcbind = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infobind = new v8::CFunctionInfo(*rcbind, 4, cargsbind);
  v8::CFunction* pFbind = new v8::CFunction((const void*)&bindFast, infobind);
  SET_FAST_METHOD(isolate, module, "bind", pFbind, bindSlow);

  v8::CTypeInfo* cargsconnect = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsconnect[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsconnect[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsconnect[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsconnect[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcconnect = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoconnect = new v8::CFunctionInfo(*rcconnect, 4, cargsconnect);
  v8::CFunction* pFconnect = new v8::CFunction((const void*)&connectFast, infoconnect);
  SET_FAST_METHOD(isolate, module, "connect", pFconnect, connectSlow);

  v8::CTypeInfo* cargslisten = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargslisten[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargslisten[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargslisten[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rclisten = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infolisten = new v8::CFunctionInfo(*rclisten, 3, cargslisten);
  v8::CFunction* pFlisten = new v8::CFunction((const void*)&listenFast, infolisten);
  SET_FAST_METHOD(isolate, module, "listen", pFlisten, listenSlow);

  v8::CTypeInfo* cargsclose = (v8::CTypeInfo*)calloc(2, sizeof(v8::CTypeInfo));
  cargsclose[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsclose[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcclose = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoclose = new v8::CFunctionInfo(*rcclose, 2, cargsclose);
  v8::CFunction* pFclose = new v8::CFunction((const void*)&closeFast, infoclose);
  SET_FAST_METHOD(isolate, module, "close", pFclose, closeSlow);

  v8::CTypeInfo* cargsaccept4 = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsaccept4[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsaccept4[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsaccept4[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsaccept4[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargsaccept4[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcaccept4 = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoaccept4 = new v8::CFunctionInfo(*rcaccept4, 5, cargsaccept4);
  v8::CFunction* pFaccept4 = new v8::CFunction((const void*)&accept4Fast, infoaccept4);
  SET_FAST_METHOD(isolate, module, "accept4", pFaccept4, accept4Slow);

  v8::CTypeInfo* cargssend = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargssend[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargssend[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssend[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargssend[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssend[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcsend = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infosend = new v8::CFunctionInfo(*rcsend, 5, cargssend);
  v8::CFunction* pFsend = new v8::CFunction((const void*)&sendFast, infosend);
  SET_FAST_METHOD(isolate, module, "send", pFsend, sendSlow);

  v8::CTypeInfo* cargsrecv = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargsrecv[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsrecv[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecv[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsrecv[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsrecv[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcrecv = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* inforecv = new v8::CFunctionInfo(*rcrecv, 5, cargsrecv);
  v8::CFunction* pFrecv = new v8::CFunction((const void*)&recvFast, inforecv);
  SET_FAST_METHOD(isolate, module, "recv", pFrecv, recvSlow);

  v8::CTypeInfo* cargsrecvfrom = (v8::CTypeInfo*)calloc(7, sizeof(v8::CTypeInfo));
  cargsrecvfrom[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsrecvfrom[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvfrom[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsrecvfrom[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  cargsrecvfrom[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvfrom[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsrecvfrom[6] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcrecvfrom = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* inforecvfrom = new v8::CFunctionInfo(*rcrecvfrom, 7, cargsrecvfrom);
  v8::CFunction* pFrecvfrom = new v8::CFunction((const void*)&recvfromFast, inforecvfrom);
  SET_FAST_METHOD(isolate, module, "recvfrom", pFrecvfrom, recvfromSlow);

  v8::CTypeInfo* cargssendmsg = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargssendmsg[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargssendmsg[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssendmsg[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargssendmsg[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcsendmsg = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infosendmsg = new v8::CFunctionInfo(*rcsendmsg, 4, cargssendmsg);
  v8::CFunction* pFsendmsg = new v8::CFunction((const void*)&sendmsgFast, infosendmsg);
  SET_FAST_METHOD(isolate, module, "sendmsg", pFsendmsg, sendmsgSlow);

  v8::CTypeInfo* cargssendmmsg = (v8::CTypeInfo*)calloc(5, sizeof(v8::CTypeInfo));
  cargssendmmsg[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargssendmmsg[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssendmmsg[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargssendmmsg[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargssendmmsg[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcsendmmsg = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infosendmmsg = new v8::CFunctionInfo(*rcsendmmsg, 5, cargssendmmsg);
  v8::CFunction* pFsendmmsg = new v8::CFunction((const void*)&sendmmsgFast, infosendmmsg);
  SET_FAST_METHOD(isolate, module, "sendmmsg", pFsendmmsg, sendmmsgSlow);

  v8::CTypeInfo* cargsrecvmsg = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsrecvmsg[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsrecvmsg[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvmsg[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsrecvmsg[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
  v8::CTypeInfo* rcrecvmsg = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* inforecvmsg = new v8::CFunctionInfo(*rcrecvmsg, 4, cargsrecvmsg);
  v8::CFunction* pFrecvmsg = new v8::CFunction((const void*)&recvmsgFast, inforecvmsg);
  SET_FAST_METHOD(isolate, module, "recvmsg", pFrecvmsg, recvmsgSlow);

  v8::CTypeInfo* cargsrecvmmsg = (v8::CTypeInfo*)calloc(6, sizeof(v8::CTypeInfo));
  cargsrecvmmsg[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsrecvmmsg[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvmmsg[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsrecvmmsg[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvmmsg[4] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsrecvmmsg[5] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcrecvmmsg = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* inforecvmmsg = new v8::CFunctionInfo(*rcrecvmmsg, 6, cargsrecvmmsg);
  v8::CFunction* pFrecvmmsg = new v8::CFunction((const void*)&recvmmsgFast, inforecvmmsg);
  SET_FAST_METHOD(isolate, module, "recvmmsg", pFrecvmmsg, recvmmsgSlow);

  v8::CTypeInfo* cargsread = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsread[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsread[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsread[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargsread[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcread = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* inforead = new v8::CFunctionInfo(*rcread, 4, cargsread);
  v8::CFunction* pFread = new v8::CFunction((const void*)&readFast, inforead);
  SET_FAST_METHOD(isolate, module, "read", pFread, readSlow);

  v8::CTypeInfo* cargswrite_string = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargswrite_string[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargswrite_string[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargswrite_string[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargswrite_string[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcwrite_string = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infowrite_string = new v8::CFunctionInfo(*rcwrite_string, 4, cargswrite_string);
  v8::CFunction* pFwrite_string = new v8::CFunction((const void*)&write_stringFast, infowrite_string);
  SET_FAST_METHOD(isolate, module, "write_string", pFwrite_string, write_stringSlow);

  v8::CTypeInfo* cargswrite = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargswrite[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargswrite[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargswrite[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  cargswrite[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcwrite = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infowrite = new v8::CFunctionInfo(*rcwrite, 4, cargswrite);
  v8::CFunction* pFwrite = new v8::CFunction((const void*)&writeFast, infowrite);
  SET_FAST_METHOD(isolate, module, "write", pFwrite, writeSlow);

  v8::CTypeInfo* cargspipe2 = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargspipe2[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargspipe2[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint64);
  cargspipe2[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcpipe2 = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infopipe2 = new v8::CFunctionInfo(*rcpipe2, 3, cargspipe2);
  v8::CFunction* pFpipe2 = new v8::CFunction((const void*)&pipe2Fast, infopipe2);
  SET_FAST_METHOD(isolate, module, "pipe2", pFpipe2, pipe2Slow);

  v8::CTypeInfo* cargsdup2 = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsdup2[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsdup2[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsdup2[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcdup2 = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infodup2 = new v8::CFunctionInfo(*rcdup2, 3, cargsdup2);
  v8::CFunction* pFdup2 = new v8::CFunction((const void*)&dup2Fast, infodup2);
  SET_FAST_METHOD(isolate, module, "dup2", pFdup2, dup2Slow);

  v8::CTypeInfo* cargsioctl = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsioctl[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsioctl[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsioctl[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsioctl[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcioctl = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoioctl = new v8::CFunctionInfo(*rcioctl, 4, cargsioctl);
  v8::CFunction* pFioctl = new v8::CFunction((const void*)&ioctlFast, infoioctl);
  SET_FAST_METHOD(isolate, module, "ioctl", pFioctl, ioctlSlow);

  v8::CTypeInfo* cargsioctl2 = (v8::CTypeInfo*)calloc(4, sizeof(v8::CTypeInfo));
  cargsioctl2[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsioctl2[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsioctl2[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  cargsioctl2[3] = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CTypeInfo* rcioctl2 = new v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
  v8::CFunctionInfo* infoioctl2 = new v8::CFunctionInfo(*rcioctl2, 4, cargsioctl2);
  v8::CFunction* pFioctl2 = new v8::CFunction((const void*)&ioctl2Fast, infoioctl2);
  SET_FAST_METHOD(isolate, module, "ioctl2", pFioctl2, ioctl2Slow);

  SET_MODULE(isolate, target, "net", module);
}
} // namespace net
} // namespace spin

extern "C" {
  void* _register_net() {
    return (void*)spin::net::Init;
  }
}
