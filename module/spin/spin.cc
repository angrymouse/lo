
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  

#include <spin.h>

namespace spin {
namespace spin {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;


typedef void (*spin_fast_call)(void*);

void spin_fastcall (void** state) {
  ((spin_fast_call)state[8])(state);
}


void createIsolateContextFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, struct FastOneByteString* const p2, uint32_t p3, struct FastOneByteString* const p4, uint32_t p5, struct FastApiTypedArray* const p6, int32_t p7, int32_t p8, uint64_t p9, struct FastOneByteString* const p10, struct FastOneByteString* const p11, int32_t p12, int32_t p13, void* p14, struct FastApiTypedArray* const p15);
v8::CTypeInfo cargscreateIsolateContext[17] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone),
};
v8::CTypeInfo rccreateIsolateContext = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infocreateIsolateContext = v8::CFunctionInfo(rccreateIsolateContext, 17, cargscreateIsolateContext);
v8::CFunction pFcreateIsolateContext = v8::CFunction((const void*)&createIsolateContextFast, &infocreateIsolateContext);

void createIsolateContext2Fast(void* p, int32_t p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastOneByteString* const p4, uint32_t p5, void* p6, int32_t p7, int32_t p8, uint64_t p9, struct FastOneByteString* const p10, struct FastOneByteString* const p11, int32_t p12, int32_t p13, void* p14, struct FastApiTypedArray* const p15);
v8::CTypeInfo cargscreateIsolateContext2[17] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone),
};
v8::CTypeInfo rccreateIsolateContext2 = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infocreateIsolateContext2 = v8::CFunctionInfo(rccreateIsolateContext2, 17, cargscreateIsolateContext2);
v8::CFunction pFcreateIsolateContext2 = v8::CFunction((const void*)&createIsolateContext2Fast, &infocreateIsolateContext2);

void destroyIsolateContextFast(void* p, struct FastApiTypedArray* const p0);
v8::CTypeInfo cargsdestroyIsolateContext[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint8, CTypeInfo::SequenceType::kIsTypedArray, CTypeInfo::Flags::kNone),
};
v8::CTypeInfo rcdestroyIsolateContext = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infodestroyIsolateContext = v8::CFunctionInfo(rcdestroyIsolateContext, 2, cargsdestroyIsolateContext);
v8::CFunction pFdestroyIsolateContext = v8::CFunction((const void*)&destroyIsolateContextFast, &infodestroyIsolateContext);

int32_t contextSizeFast(void* p);
v8::CTypeInfo cargscontextSize[1] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),

};
v8::CTypeInfo rccontextSize = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infocontextSize = v8::CFunctionInfo(rccontextSize, 1, cargscontextSize);
v8::CFunction pFcontextSize = v8::CFunction((const void*)&contextSizeFast, &infocontextSize);

void fastcallFast(void* p, void* p0);
v8::CTypeInfo cargsfastcall[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcfastcall = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infofastcall = v8::CFunctionInfo(rcfastcall, 2, cargsfastcall);
v8::CFunction pFfastcall = v8::CFunction((const void*)&fastcallFast, &infofastcall);



void createIsolateSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint32Array> u321 = args[1].As<Uint32Array>();
  uint8_t* ptr1 = (uint8_t*)u321->Buffer()->Data() + u321->ByteOffset();
  char** v1 = reinterpret_cast<char**>(ptr1);
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  String::Utf8Value v4(isolate, args[4]);
  uint32_t v5 = Local<Integer>::Cast(args[5])->Value();
  Local<Uint8Array> u86 = args[6].As<Uint8Array>();
  uint8_t* ptr6 = (uint8_t*)u86->Buffer()->Data() + u86->ByteOffset();
  char* v6 = reinterpret_cast<char*>(ptr6);
  int32_t v7 = Local<Integer>::Cast(args[7])->Value();
  int32_t v8 = Local<Integer>::Cast(args[8])->Value();
  uint64_t v9 = Local<Integer>::Cast(args[9])->Value();
  String::Utf8Value v10(isolate, args[10]);
  String::Utf8Value v11(isolate, args[11]);
  int32_t v12 = Local<Integer>::Cast(args[12])->Value();
  int32_t v13 = Local<Integer>::Cast(args[13])->Value();
  void* v14 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[14])->Value());
  int32_t rc = spin_create_isolate(v0, v1, *v2, v3, *v4, v5, v6, v7, v8, v9, *v10, *v11, v12, v13, v14);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

void createIsolateContextSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  Local<Uint32Array> u321 = args[1].As<Uint32Array>();
  uint8_t* ptr1 = (uint8_t*)u321->Buffer()->Data() + u321->ByteOffset();
  char** v1 = reinterpret_cast<char**>(ptr1);
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  String::Utf8Value v4(isolate, args[4]);
  uint32_t v5 = Local<Integer>::Cast(args[5])->Value();
  Local<Uint8Array> u86 = args[6].As<Uint8Array>();
  uint8_t* ptr6 = (uint8_t*)u86->Buffer()->Data() + u86->ByteOffset();
  char* v6 = reinterpret_cast<char*>(ptr6);
  int32_t v7 = Local<Integer>::Cast(args[7])->Value();
  int32_t v8 = Local<Integer>::Cast(args[8])->Value();
  uint64_t v9 = Local<Integer>::Cast(args[9])->Value();
  String::Utf8Value v10(isolate, args[10]);
  String::Utf8Value v11(isolate, args[11]);
  int32_t v12 = Local<Integer>::Cast(args[12])->Value();
  int32_t v13 = Local<Integer>::Cast(args[13])->Value();
  void* v14 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[14])->Value());
  Local<Uint8Array> u815 = args[15].As<Uint8Array>();
  uint8_t* ptr15 = (uint8_t*)u815->Buffer()->Data() + u815->ByteOffset();
  struct isolate_context* v15 = reinterpret_cast<struct isolate_context*>(ptr15);
  spin_create_isolate_context(v0, v1, *v2, v3, *v4, v5, v6, v7, v8, v9, *v10, *v11, v12, v13, v14, v15);
}

void createIsolateContextFast(void* p, int32_t p0, struct FastApiTypedArray* const p1, struct FastOneByteString* const p2, uint32_t p3, struct FastOneByteString* const p4, uint32_t p5, struct FastApiTypedArray* const p6, int32_t p7, int32_t p8, uint64_t p9, struct FastOneByteString* const p10, struct FastOneByteString* const p11, int32_t p12, int32_t p13, void* p14, struct FastApiTypedArray* const p15) {
  int32_t v0 = p0;
  char** v1 = reinterpret_cast<char**>(p1->data);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  struct FastOneByteString* const v4 = p4;
  uint32_t v5 = p5;
  char* v6 = reinterpret_cast<char*>(p6->data);
  int32_t v7 = p7;
  int32_t v8 = p8;
  uint64_t v9 = p9;
  struct FastOneByteString* const v10 = p10;
  struct FastOneByteString* const v11 = p11;
  int32_t v12 = p12;
  int32_t v13 = p13;
  void* v14 = reinterpret_cast<void*>(p14);
  struct isolate_context* v15 = reinterpret_cast<struct isolate_context*>(p15->data);
  spin_create_isolate_context(v0, v1, v2->data, v3, v4->data, v5, v6, v7, v8, v9, v10->data, v11->data, v12, v13, v14, v15);
}
void createIsolateContext2Slow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  char** v1 = reinterpret_cast<char**>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  String::Utf8Value v2(isolate, args[2]);
  uint32_t v3 = Local<Integer>::Cast(args[3])->Value();
  String::Utf8Value v4(isolate, args[4]);
  uint32_t v5 = Local<Integer>::Cast(args[5])->Value();
  char* v6 = reinterpret_cast<char*>((uint64_t)Local<Integer>::Cast(args[6])->Value());
  int32_t v7 = Local<Integer>::Cast(args[7])->Value();
  int32_t v8 = Local<Integer>::Cast(args[8])->Value();
  uint64_t v9 = Local<Integer>::Cast(args[9])->Value();
  String::Utf8Value v10(isolate, args[10]);
  String::Utf8Value v11(isolate, args[11]);
  int32_t v12 = Local<Integer>::Cast(args[12])->Value();
  int32_t v13 = Local<Integer>::Cast(args[13])->Value();
  void* v14 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[14])->Value());
  Local<Uint8Array> u815 = args[15].As<Uint8Array>();
  uint8_t* ptr15 = (uint8_t*)u815->Buffer()->Data() + u815->ByteOffset();
  struct isolate_context* v15 = reinterpret_cast<struct isolate_context*>(ptr15);
  spin_create_isolate_context(v0, v1, *v2, v3, *v4, v5, v6, v7, v8, v9, *v10, *v11, v12, v13, v14, v15);
}

void createIsolateContext2Fast(void* p, int32_t p0, void* p1, struct FastOneByteString* const p2, uint32_t p3, struct FastOneByteString* const p4, uint32_t p5, void* p6, int32_t p7, int32_t p8, uint64_t p9, struct FastOneByteString* const p10, struct FastOneByteString* const p11, int32_t p12, int32_t p13, void* p14, struct FastApiTypedArray* const p15) {
  int32_t v0 = p0;
  char** v1 = reinterpret_cast<char**>(p1);
  struct FastOneByteString* const v2 = p2;
  uint32_t v3 = p3;
  struct FastOneByteString* const v4 = p4;
  uint32_t v5 = p5;
  char* v6 = reinterpret_cast<char*>(p6);
  int32_t v7 = p7;
  int32_t v8 = p8;
  uint64_t v9 = p9;
  struct FastOneByteString* const v10 = p10;
  struct FastOneByteString* const v11 = p11;
  int32_t v12 = p12;
  int32_t v13 = p13;
  void* v14 = reinterpret_cast<void*>(p14);
  struct isolate_context* v15 = reinterpret_cast<struct isolate_context*>(p15->data);
  spin_create_isolate_context(v0, v1, v2->data, v3, v4->data, v5, v6, v7, v8, v9, v10->data, v11->data, v12, v13, v14, v15);
}
void destroyIsolateContextSlow(const FunctionCallbackInfo<Value> &args) {
  Local<Uint8Array> u80 = args[0].As<Uint8Array>();
  uint8_t* ptr0 = (uint8_t*)u80->Buffer()->Data() + u80->ByteOffset();
  struct isolate_context* v0 = reinterpret_cast<struct isolate_context*>(ptr0);
  spin_destroy_isolate_context(v0);
}

void destroyIsolateContextFast(void* p, struct FastApiTypedArray* const p0) {
  struct isolate_context* v0 = reinterpret_cast<struct isolate_context*>(p0->data);
  spin_destroy_isolate_context(v0);
}
void contextSizeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  int32_t rc = spin_context_size();
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t contextSizeFast(void* p) {

  return spin_context_size();
}
void startIsolateSlow(const FunctionCallbackInfo<Value> &args) {
  Local<Uint8Array> u80 = args[0].As<Uint8Array>();
  uint8_t* ptr0 = (uint8_t*)u80->Buffer()->Data() + u80->ByteOffset();
  void* v0 = reinterpret_cast<void*>(ptr0);
  spin_start_isolate(v0);
}

void callCallbackSlow(const FunctionCallbackInfo<Value> &args) {
  exec_info* v0 = reinterpret_cast<exec_info*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  spin_callback(v0);
}

void fastcallSlow(const FunctionCallbackInfo<Value> &args) {
  void** v0 = reinterpret_cast<void**>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  spin_fastcall(v0);
}

void fastcallFast(void* p, void* p0) {
  void** v0 = reinterpret_cast<void**>(p0);
  spin_fastcall(v0);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  SET_METHOD(isolate, module, "createIsolate", createIsolateSlow);
  SET_FAST_METHOD(isolate, module, "createIsolateContext", &pFcreateIsolateContext, createIsolateContextSlow);
  SET_FAST_METHOD(isolate, module, "createIsolateContext2", &pFcreateIsolateContext2, createIsolateContext2Slow);
  SET_FAST_METHOD(isolate, module, "destroyIsolateContext", &pFdestroyIsolateContext, destroyIsolateContextSlow);
  SET_FAST_METHOD(isolate, module, "contextSize", &pFcontextSize, contextSizeSlow);
  SET_METHOD(isolate, module, "startIsolate", startIsolateSlow);
  SET_METHOD(isolate, module, "callCallback", callCallbackSlow);
  SET_FAST_METHOD(isolate, module, "fastcall", &pFfastcall, fastcallSlow);

  SET_MODULE(isolate, target, "spin", module);
}
} // namespace spin
} // namespace spin

extern "C" {
  void* _register_spin() {
    return (void*)spin::spin::Init;
  }
}
