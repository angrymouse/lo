
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  

#ifdef __cplusplus
extern "C"
    {
#endif
#include <ada_c.h>
#ifdef __cplusplus
    }
#endif

#include <spin.h>

namespace spin {
namespace adaurl {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;



void parseSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  String::Utf8Value v0(isolate, args[0]);
  void* rc = ada_parse(*v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((void**)ab->Data())[0] = rc;
}

void parseFast(void* p, struct FastOneByteString* const p0, struct FastApiTypedArray* const p_ret) {
  struct FastOneByteString* const v0 = p0;
  void* r = ada_parse(v0->data);
  ((void**)p_ret->data)[0] = r;

}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  v8::CTypeInfo* cargsparse = (v8::CTypeInfo*)calloc(3, sizeof(v8::CTypeInfo));
  cargsparse[0] = v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value);
  cargsparse[1] = v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString);
  cargsparse[2] = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone);
  v8::CTypeInfo* rcparse = new v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
  v8::CFunctionInfo* infoparse = new v8::CFunctionInfo(*rcparse, 3, cargsparse);
  v8::CFunction* pFparse = new v8::CFunction((const void*)&parseFast, infoparse);
  SET_FAST_METHOD(isolate, module, "parse", pFparse, parseSlow);

  SET_MODULE(isolate, target, "adaurl", module);
}
} // namespace adaurl
} // namespace spin

extern "C" {
  void* _register_adaurl() {
    return (void*)spin::adaurl::Init;
  }
}
